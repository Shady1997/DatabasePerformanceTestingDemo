<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="5.0" jmeter="5.4.1">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="MVT PORT" enabled="true">
      <stringProp name="TestPlan.comments">This Script to handle performance scripts for movement port subsystem</stringProp>
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">true</boolProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" enabled="true">
        <collectionProp name="Arguments.arguments"/>
      </elementProp>
      <stringProp name="TestPlan.user_define_classpath"></stringProp>
    </TestPlan>
    <hashTree>
      <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
        <collectionProp name="HeaderManager.headers">
          <elementProp name="Accept" elementType="Header">
            <stringProp name="Header.name">Accept</stringProp>
            <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
          </elementProp>
          <elementProp name="User-Agent" elementType="Header">
            <stringProp name="Header.name">User-Agent</stringProp>
            <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/92.0.4515.159 Safari/537.36</stringProp>
          </elementProp>
          <elementProp name="" elementType="Header">
            <stringProp name="Header.name">Content-Type</stringProp>
            <stringProp name="Header.value">application/json</stringProp>
          </elementProp>
        </collectionProp>
      </HeaderManager>
      <hashTree/>
      <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments">
          <elementProp name="BASE_URL_1" elementType="Argument">
            <stringProp name="Argument.name">BASE_URL_1</stringProp>
            <stringProp name="Argument.value">cqcehap001.qcenv.idemia.local</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="fullLatinNamee" elementType="Argument">
            <stringProp name="Argument.name">fullLatinNamee</stringProp>
            <stringProp name="Argument.value"></stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="arabicName" elementType="Argument">
            <stringProp name="Argument.name">arabicName</stringProp>
            <stringProp name="Argument.value"></stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="birthDate" elementType="Argument">
            <stringProp name="Argument.name">birthDate</stringProp>
            <stringProp name="Argument.value"></stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="firstIdentifier" elementType="Argument">
            <stringProp name="Argument.name">firstIdentifier</stringProp>
            <stringProp name="Argument.value"></stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="secondIdentifier" elementType="Argument">
            <stringProp name="Argument.name">secondIdentifier</stringProp>
            <stringProp name="Argument.value"></stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
        </collectionProp>
      </Arguments>
      <hashTree/>
      <ConfigTestElement guiclass="HttpDefaultsGui" testclass="ConfigTestElement" testname="HTTP Request Defaults" enabled="true">
        <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
          <collectionProp name="Arguments.arguments"/>
        </elementProp>
        <stringProp name="HTTPSampler.domain"></stringProp>
        <stringProp name="HTTPSampler.port"></stringProp>
        <stringProp name="HTTPSampler.protocol"></stringProp>
        <stringProp name="HTTPSampler.contentEncoding"></stringProp>
        <stringProp name="HTTPSampler.path"></stringProp>
        <boolProp name="HTTPSampler.image_parser">true</boolProp>
        <boolProp name="HTTPSampler.concurrentDwn">true</boolProp>
        <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
        <stringProp name="HTTPSampler.connect_timeout"></stringProp>
        <stringProp name="HTTPSampler.response_timeout"></stringProp>
      </ConfigTestElement>
      <hashTree/>
      <DNSCacheManager guiclass="DNSCachePanel" testclass="DNSCacheManager" testname="DNS Cache Manager" enabled="true">
        <collectionProp name="DNSCacheManager.servers"/>
        <boolProp name="DNSCacheManager.clearEachIteration">true</boolProp>
        <boolProp name="DNSCacheManager.isCustomResolver">false</boolProp>
      </DNSCacheManager>
      <hashTree/>
      <AuthManager guiclass="AuthPanel" testclass="AuthManager" testname="HTTP Authorization Manager" enabled="true">
        <collectionProp name="AuthManager.auth_list"/>
        <boolProp name="AuthManager.controlledByThreadGroup">false</boolProp>
        <boolProp name="AuthManager.clearEachIteration">true</boolProp>
      </AuthManager>
      <hashTree/>
      <CookieManager guiclass="CookiePanel" testclass="CookieManager" testname="HTTP Cookie Manager" enabled="true">
        <collectionProp name="CookieManager.cookies"/>
        <boolProp name="CookieManager.clearEachIteration">true</boolProp>
        <boolProp name="CookieManager.controlledByThreadGroup">false</boolProp>
      </CookieManager>
      <hashTree/>
      <CacheManager guiclass="CacheManagerGui" testclass="CacheManager" testname="HTTP Cache Manager" enabled="true">
        <boolProp name="clearEachIteration">true</boolProp>
        <boolProp name="useExpires">false</boolProp>
        <boolProp name="CacheManager.controlledByThread">false</boolProp>
      </CacheManager>
      <hashTree/>
      <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="Read Data" enabled="true">
        <stringProp name="delimiter">,</stringProp>
        <stringProp name="fileEncoding"></stringProp>
        <stringProp name="filename">C:/Performance/BCVI-Performance/Border Control/MVT Port/UsedData.csv</stringProp>
        <boolProp name="ignoreFirstLine">false</boolProp>
        <boolProp name="quotedData">false</boolProp>
        <boolProp name="recycle">true</boolProp>
        <stringProp name="shareMode">shareMode.all</stringProp>
        <boolProp name="stopThread">false</boolProp>
        <stringProp name="variableNames"></stringProp>
      </CSVDataSet>
      <hashTree/>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Movement Port" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration">0</stringProp>
        <stringProp name="ThreadGroup.delay">0</stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="login" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">{&quot;username&quot;:&quot;test5&quot;,&quot;password&quot;:&quot;P@ssw0rd&quot;}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">http</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">movement_crud/v1/movement/login</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="check if Login Successfully" enabled="true">
            <collectionProp name="Asserion.test_strings">
              <stringProp name="49586">200</stringProp>
            </collectionProp>
            <stringProp name="Assertion.custom_message"></stringProp>
            <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
            <boolProp name="Assertion.assume_success">false</boolProp>
            <intProp name="Assertion.test_type">1</intProp>
          </ResponseAssertion>
          <hashTree/>
        </hashTree>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="VIP UNWANTED" enabled="true">
          <boolProp name="TransactionController.includeTimers">false</boolProp>
          <boolProp name="TransactionController.parent">true</boolProp>
        </TransactionController>
        <hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="traveling_vip" enabled="true">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">true</boolProp>
          </TransactionController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="getAllBusinessProcessSubtypes" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">http</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">eresidency-bcvi-api/v2/reference-data/getAllBusinessProcessSubtypes</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="check Lookups" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">1</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="getLookupConsulateName" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="subsystem" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">subsystem</stringProp>
                    <stringProp name="Argument.value">MOVEMENT</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="className" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">className</stringProp>
                    <stringProp name="Argument.value">ConsulateName</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">http</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">core_service/v1/lookup/1/getLookup</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="check Lookups" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">1</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="getLookupCountry" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="subsystem" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">subsystem</stringProp>
                    <stringProp name="Argument.value">MOVEMENT</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="className" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">className</stringProp>
                    <stringProp name="Argument.value">Country</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">http</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">core_service/v1/lookup/1/getLookup</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="check Lookups" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">1</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="getLookupEVisaTypeOfEntries" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="subsystem" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">subsystem</stringProp>
                    <stringProp name="Argument.value">MOVEMENT</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="className" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">className</stringProp>
                    <stringProp name="Argument.value">EVisaTypeOfEntries</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">http</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">core_service/v1/lookup/1/getLookup</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="check Lookups" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">1</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="getLookupFlightType" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="subsystem" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">subsystem</stringProp>
                    <stringProp name="Argument.value">MOVEMENT</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="className" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">className</stringProp>
                    <stringProp name="Argument.value">FlightType</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">http</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">core_service/v1/lookup/1/getLookup</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="check Lookups" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">1</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="getLookupTerminal" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="className" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">className</stringProp>
                    <stringProp name="Argument.value">Terminal</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">http</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">core_service/v1/lookup/1/getLookup</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="check Lookups" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">1</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="getLookupMovementType" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="className" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">className</stringProp>
                    <stringProp name="Argument.value">MovementType</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">http</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">core_service/v1/lookup/1/getLookup</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="check Lookups" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">1</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="getLookupPassengerType" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="subsystem" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">subsystem</stringProp>
                    <stringProp name="Argument.value">MOVEMENT</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="className" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">className</stringProp>
                    <stringProp name="Argument.value">PassengerType</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">http</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">core_service/v1/lookup/1/getLookup</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="check Lookups" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">1</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="getLookupSex" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="subsystem" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">subsystem</stringProp>
                    <stringProp name="Argument.value">MOVEMENT</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="className" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">className</stringProp>
                    <stringProp name="Argument.value">Sex</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">http</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">core_service/v1/lookup/1/getLookup</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="check Lookups" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">1</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="getLookupTravelDocumentType" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="subsystem" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">subsystem</stringProp>
                    <stringProp name="Argument.value">MOVEMENT</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="className" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">className</stringProp>
                    <stringProp name="Argument.value">TravelDocumentType</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">http</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">core_service/v1/lookup/1/getLookup</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="check Lookups" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">1</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="getLookupPort" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="subsystem" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">subsystem</stringProp>
                    <stringProp name="Argument.value">MOVEMENT</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="className" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">className</stringProp>
                    <stringProp name="Argument.value">Port</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">http</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">core_service/v1/lookup/1/getLookup</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="check Lookups" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">1</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="get_configurationForMOVEMENT" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="subSystem" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">subSystem</stringProp>
                    <stringProp name="Argument.value">MOVEMENT</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="context" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">context</stringProp>
                    <stringProp name="Argument.value">FRONTEND</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">http</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">movement_crud/v1/movement/get_configuration</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="check Lookups" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">1</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="get_configurationForMOVEMENT" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="subSystem" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">subSystem</stringProp>
                    <stringProp name="Argument.value">MOVEMENT</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="context" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">context</stringProp>
                    <stringProp name="Argument.value">FRONTEND</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">http</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">movement_crud/v1/movement/get_configuration</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="check Lookups" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">1</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="business_rules-verify" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&quot;businessArea&quot;:&quot;MVT&quot;,&quot;port&quot;:&quot;ASSH&quot;}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">http</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">businessrules_verify/v1/business_rules-verify/513f6507-72d6-485c-ac68-b536b37a3bf0/search</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="getOpenFlights" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="creationPort" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">creationPort</stringProp>
                    <stringProp name="Argument.value">ASSH</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="flightType" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">flightType</stringProp>
                    <stringProp name="Argument.value">FLIGHT_TYPE.DEPARTURE</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">http</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">flightmanagement_crud/v1/flight/cacf964d-a006-1919-3894-d56775354229/getOpenFlights</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="get_recent_flights" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="maxResults" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">maxResults</stringProp>
                    <stringProp name="Argument.value">10</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="flightType" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">flightType</stringProp>
                    <stringProp name="Argument.value">FLIGHT_TYPE.DEPARTURE</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="portId" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">portId</stringProp>
                    <stringProp name="Argument.value">ASSH</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">http</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">movement_crud/v1/movement/cacf964d-a006-1919-3894-d56775354229/get_recent_flights</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="getAllBusinessProcessSubtypes" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">http</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">eresidency-bcvi-api/v2/reference-data/getAllBusinessProcessSubtypes</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="getLookuptravelReason" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&quot;flightType&quot;:&quot;DEPARTURE&quot;,&quot;foreigner&quot;:&quot;true&quot;}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">http</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">core_service/v1/lookup/1/getLookup/travelReason</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="get_interNationalPortETHAIRPORT" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">http</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">core_service/v1/lookup/cacf964d-a006-1919-3894-d56775354229/interNationalPort/ETH/AIRPORT</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="get_flight_metrics_port" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">http</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">movement_crud/v1/movement/cacf964d-a006-1919-3894-d56775354229/get_flight_metrics_port/220f03bd-a4fa-4606-8278-ffd682578627</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="findForeignerOnTravelDocument" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&quot;travelDocumentNumber&quot;:&quot;HFFF&quot;,&quot;travelDocumentAuthoritySource&quot;:&quot;COUNTRY.AZE&quot;}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">http</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">movement_crud/v1/foreigner/contextId/findForeignerOnTravelDocument</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="list_movements" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="orderType" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">orderType</stringProp>
                    <stringProp name="Argument.value">DESC</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="1" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">1</stringProp>
                    <stringProp name="Argument.value">1</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="notificationRequired" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">notificationRequired</stringProp>
                    <stringProp name="Argument.value">true</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="firstLaneOfficer" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">firstLaneOfficer</stringProp>
                    <stringProp name="Argument.value">test5</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="maxResults" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">maxResults</stringProp>
                    <stringProp name="Argument.value">10</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="orderBy" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">orderBy</stringProp>
                    <stringProp name="Argument.value">creationDate</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="appendLivePortrait" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">appendLivePortrait</stringProp>
                    <stringProp name="Argument.value">true</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="portName" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">portName</stringProp>
                    <stringProp name="Argument.value">ASSH</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="notificationRead" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">notificationRead</stringProp>
                    <stringProp name="Argument.value">false</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="movementSourceType" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">movementSourceType</stringProp>
                    <stringProp name="Argument.value">PORT</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="ignoreFlightList" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">ignoreFlightList</stringProp>
                    <stringProp name="Argument.value">true</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">http</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">movement_crud/v1/movement/8e419cf5-c5de-0896-c8ea-547b8eee7781/list_movements</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="list_movements" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="orderType" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">orderType</stringProp>
                    <stringProp name="Argument.value">DESC</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="1" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">1</stringProp>
                    <stringProp name="Argument.value">1</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="notificationRequired" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">notificationRequired</stringProp>
                    <stringProp name="Argument.value">true</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="firstLaneOfficer" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">firstLaneOfficer</stringProp>
                    <stringProp name="Argument.value">test5</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="maxResults" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">maxResults</stringProp>
                    <stringProp name="Argument.value">10</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="orderBy" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">orderBy</stringProp>
                    <stringProp name="Argument.value">creationDate</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="appendLivePortrait" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">appendLivePortrait</stringProp>
                    <stringProp name="Argument.value">true</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="portName" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">portName</stringProp>
                    <stringProp name="Argument.value">ASSH</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="notificationRead" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">notificationRead</stringProp>
                    <stringProp name="Argument.value">false</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="movementSourceType" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">movementSourceType</stringProp>
                    <stringProp name="Argument.value">PORT</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="ignoreFlightList" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">ignoreFlightList</stringProp>
                    <stringProp name="Argument.value">true</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">http</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">movement_crud/v1/movement/8e419cf5-c5de-0896-c8ea-547b8eee7781/list_movements</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="checkPassport" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="passportNumber" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">passportNumber</stringProp>
                    <stringProp name="Argument.value">HFFF</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="nationality" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">nationality</stringProp>
                    <stringProp name="Argument.value">COUNTRY.AZE</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="operatorId" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">operatorId</stringProp>
                    <stringProp name="Argument.value">test5</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">http</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">watchlist_crud/v1/watchlist/blacklist_passport/ea9c49e0-b4db-e534-bc4d-cbfea59b2d1e/checkPassport</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="bulk-verify" enabled="false">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">[{&quot;activated&quot;:false,&quot;applicationDate&quot;:&quot;2021-06-01T00:00:00+02:00&quot;,&quot;businessArea&quot;:&quot;MVT&quot;,&quot;decisionTable&quot;:{&quot;rule_execution_set&quot;:[{&quot;criteria&quot;:{&quot;id&quot;:1,&quot;name&quot;:&quot;nationality&quot;,&quot;type&quot;:&quot;LIST&quot;,&quot;values&quot;:[&quot;COUNTRY.AZE&quot;]}}]},&quot;description&quot;:&quot;Ø´Ø§Ø¯Ù&#x8a; ØªØ³Øª&quot;,&quot;id&quot;:&quot;280cd980-205e-4b3a-9364-6c3f37313e7b&quot;,&quot;isVerifiable&quot;:true,&quot;name&quot;:&quot;Ø´Ø§Ø¯Ù&#x8a; Ø´Ø§Ø¯Ù&#x8a;&quot;},{&quot;activated&quot;:false,&quot;applicationDate&quot;:&quot;2021-05-01T00:00:00+02:00&quot;,&quot;businessArea&quot;:&quot;MVT&quot;,&quot;decisionTable&quot;:{&quot;rule_execution_set&quot;:[{&quot;criteria&quot;:{&quot;id&quot;:1,&quot;name&quot;:&quot;nationality&quot;,&quot;type&quot;:&quot;LIST&quot;,&quot;values&quot;:[&quot;COUNTRY.AZE&quot;]}}]},&quot;description&quot;:&quot;Ø¬Ù&#x86;Ø³Ù&#x8a;Ø§Øª Ù&#x8a;Ø¬Ø¨ ØªØ³Ø¬Ù&#x8a;Ù&#x84;Ù&#x87;Ø§&quot;,&quot;id&quot;:&quot;a4d6dcff-c932-4db0-88df-9346cc5e4d4e&quot;,&quot;isVerifiable&quot;:true,&quot;name&quot;:&quot;Ù&#x8a;Ø¬Ø¨ ØªØ³Ø¬Ù&#x8a;Ù&#x84;&quot;},{&quot;activated&quot;:false,&quot;applicationDate&quot;:&quot;2021-04-19T00:00:00+02:00&quot;,&quot;businessArea&quot;:&quot;MVT&quot;,&quot;decisionTable&quot;:{&quot;rule_execution_set&quot;:[{&quot;criteria&quot;:{&quot;id&quot;:45,&quot;name&quot;:&quot;militaryTravelStatusExpirationDate&quot;,&quot;type&quot;:&quot;DATE&quot;}}]},&quot;description&quot;:&quot;Ù&#x88;ØµÙ&#x81; Ø§Ù&#x87;Ù&#x85; Ø§Ù&#x87;Ù&#x85; 12233333333333&quot;,&quot;id&quot;:&quot;42e3bbf9-02fa-43ab-8049-494ae78e4a39&quot;,&quot;isVerifiable&quot;:true,&quot;name&quot;:&quot;Ø§Ù&#x87;Ù&#x85; 1&quot;},{&quot;activated&quot;:false,&quot;applicationDate&quot;:&quot;2021-03-29T00:00:00+02:00&quot;,&quot;businessArea&quot;:&quot;MVT&quot;,&quot;decisionTable&quot;:{&quot;rule_execution_set&quot;:[{&quot;criteria&quot;:{&quot;id&quot;:1,&quot;name&quot;:&quot;nationality&quot;,&quot;type&quot;:&quot;LIST&quot;,&quot;values&quot;:[&quot;COUNTRY.AZE&quot;]}}]},&quot;description&quot;:&quot;Ù&#x88;ØµÙ&#x81; Ù&#x88;ØµÙ&#x81;&quot;,&quot;id&quot;:&quot;6e6a6e0a-2997-44ce-85de-6b93160dfa07&quot;,&quot;isVerifiable&quot;:true,&quot;name&quot;:&quot;Ù&#x82;Ø§Ø¹Ø¯Ø© Ø¹Ù&#x85;Ù&#x84;&quot;},{&quot;activated&quot;:false,&quot;applicationDate&quot;:&quot;2021-03-28T15:52:12+02:00&quot;,&quot;businessArea&quot;:&quot;MVT&quot;,&quot;decisionTable&quot;:{&quot;rule_execution_set&quot;:[{&quot;criteria&quot;:{&quot;id&quot;:1,&quot;name&quot;:&quot;nationality&quot;,&quot;type&quot;:&quot;LIST&quot;,&quot;values&quot;:[&quot;COUNTRY.AZE&quot;]}}]},&quot;description&quot;:&quot;Ù&#x82;Ø§Ø¹Ø¯Ø© Ø§Ù&#x84;Ù&#x81;Ù&#x8a;Ø²Ø§ Ù&#x84;Ù&#x84;Ù&#x85;ØµØ±Ù&#x8a;Ù&#x8a;Ù&#x86;&quot;,&quot;id&quot;:&quot;e02b3f0c-c283-471b-a5ca-b82ba62ab3cd&quot;,&quot;isVerifiable&quot;:true,&quot;name&quot;:&quot;Ù&#x82;Ø§Ø¹Ø¯Ø© Ø§Ù&#x84;Ù&#x81;Ù&#x8a;Ø²Ø§ Ù&#x84;Ù&#x84;Ù&#x85;ØµØ±Ù&#x8a;Ù&#x8a;Ù&#x86;&quot;},{&quot;activated&quot;:false,&quot;applicationDate&quot;:&quot;2021-03-28T15:52:12+02:00&quot;,&quot;businessArea&quot;:&quot;MVT&quot;,&quot;decisionTable&quot;:{&quot;rule_execution_set&quot;:[{&quot;criteria&quot;:{&quot;id&quot;:1,&quot;name&quot;:&quot;nationality&quot;,&quot;type&quot;:&quot;LIST&quot;,&quot;values&quot;:[&quot;COUNTRY.AZE&quot;]}}]},&quot;description&quot;:&quot;Ù&#x82;Ø§Ø¹Ø¯Ø© Ø§Ù&#x84;Ø¨ØµÙ&#x85;Ø§Øª Ù&#x84;Ù&#x84;Ù&#x85;ØµØ±Ù&#x8a;Ù&#x8a;Ù&#x86;&quot;,&quot;id&quot;:&quot;718b1eb3-a29e-4c5a-a183-e923e2da2392&quot;,&quot;isVerifiable&quot;:true,&quot;name&quot;:&quot; Ù&#x82;Ø§Ø¹Ø¯Ø© Ø§Ù&#x84;Ø¨ØµÙ&#x85;Ø§Øª Ù&#x84;Ù&#x84;Ù&#x85;ØµØ±Ù&#x8a;Ù&#x8a;Ù&#x86;&quot;},{&quot;activated&quot;:false,&quot;applicationDate&quot;:&quot;2021-03-28T15:52:12+02:00&quot;,&quot;businessArea&quot;:&quot;MVT&quot;,&quot;decisionTable&quot;:{&quot;rule_execution_set&quot;:[{&quot;criteria&quot;:{&quot;id&quot;:12,&quot;name&quot;:&quot;age&quot;,&quot;type&quot;:&quot;RANGE&quot;,&quot;values&quot;:[&quot;25&quot;]}}]},&quot;description&quot;:&quot;Ù&#x85;Ù&#x86;Ø¹ Ø£Ø®Ø° Ø§Ù&#x84;Ø¨ØµÙ&#x85;Ø§Øª Ù&#x84;Ù&#x84;Ø£Ø·Ù&#x81;Ø§Ù&#x84;&quot;,&quot;id&quot;:&quot;4df82cbe-8762-41dd-bd9c-e405adba7aab&quot;,&quot;isVerifiable&quot;:true,&quot;name&quot;:&quot;Ù&#x85;Ù&#x86;Ø¹ Ø£Ø®Ø° Ø§Ù&#x84;Ø¨ØµÙ&#x85;Ø§Øª Ù&#x84;Ù&#x84;Ø£Ø·Ù&#x81;Ø§Ù&#x84;&quot;},{&quot;activated&quot;:false,&quot;applicationDate&quot;:&quot;2021-03-28T15:52:12+02:00&quot;,&quot;businessArea&quot;:&quot;MVT&quot;,&quot;decisionTable&quot;:{&quot;rule_execution_set&quot;:[{&quot;criteria&quot;:{&quot;id&quot;:12,&quot;name&quot;:&quot;age&quot;,&quot;type&quot;:&quot;RANGE&quot;,&quot;values&quot;:[&quot;25&quot;]}}]},&quot;description&quot;:&quot;Ù&#x85;Ù&#x86;Ø¹ Ø£Ø®Ø° Ø§Ù&#x84;ØµÙ&#x88;Ø±Ø© Ù&#x84;Ù&#x84;Ø£Ø·Ù&#x81;Ø§Ù&#x84;&quot;,&quot;id&quot;:&quot;4df82cbe-8762-41dd-bd9c-e405adba7aa1&quot;,&quot;isVerifiable&quot;:true,&quot;name&quot;:&quot;Ù&#x85;Ù&#x86;Ø¹ Ø£Ø®Ø° Ø§Ù&#x84;ØµÙ&#x88;Ø±Ø© Ù&#x84;Ù&#x84;Ø£Ø·Ù&#x81;Ø§Ù&#x84;&quot;},{&quot;activated&quot;:false,&quot;applicationDate&quot;:&quot;2021-03-28T15:52:12+02:00&quot;,&quot;businessArea&quot;:&quot;MVT&quot;,&quot;decisionTable&quot;:{&quot;rule_execution_set&quot;:[{&quot;criteria&quot;:{&quot;id&quot;:17,&quot;name&quot;:&quot;paxType&quot;,&quot;type&quot;:&quot;LIST&quot;,&quot;values&quot;:[&quot;PASSENGER_TYPE.NORMAL_PASSENGER&quot;]}}]},&quot;description&quot;:&quot;Ù&#x84;Ø§ Ù&#x8a;Ø¬Ù&#x88;Ø² Ù&#x84;Ù&#x87; Ø§Ø®Ø° Ø§Ù&#x84;Ø¨ØµÙ&#x85;Ø§Øª&quot;,&quot;id&quot;:&quot;18bd1f93-eedb-499e-b2d7-82c0ee9cbb95&quot;,&quot;isVerifiable&quot;:true,&quot;name&quot;:&quot;Ø±Ø§Ù&#x83;Ø¨ Ù&#x87;Ø§Ù&#x85; &quot;},{&quot;activated&quot;:false,&quot;applicationDate&quot;:&quot;2021-03-28T15:52:12+02:00&quot;,&quot;businessArea&quot;:&quot;MVT&quot;,&quot;decisionTable&quot;:{&quot;rule_execution_set&quot;:[{&quot;criteria&quot;:{&quot;id&quot;:17,&quot;name&quot;:&quot;paxType&quot;,&quot;type&quot;:&quot;LIST&quot;,&quot;values&quot;:[&quot;PASSENGER_TYPE.NORMAL_PASSENGER&quot;]}}]},&quot;description&quot;:&quot;Ø±Ø§Ù&#x83;Ø¨ Ù&#x87;Ø§Ù&#x85; Ù&#x84;Ù&#x8a;Ø³ Ù&#x84;Ù&#x87; Ø§Ø®Ø° Ø§Ù&#x84;ØµÙ&#x88;Ø±Ø©&quot;,&quot;id&quot;:&quot;97cb8faf-436f-4896-82fc-8faa4e305384&quot;,&quot;isVerifiable&quot;:true,&quot;name&quot;:&quot;Ø±Ø§Ù&#x83;Ø¨ Ù&#x87;Ø§Ù&#x85; Ù&#x84;Ù&#x8a;Ø³ Ù&#x84;Ù&#x87; Ø§Ø®Ø° Ø§Ù&#x84;ØµÙ&#x88;Ø±Ø©&quot;},{&quot;activated&quot;:false,&quot;applicationDate&quot;:&quot;2021-03-28T15:52:12+02:00&quot;,&quot;businessArea&quot;:&quot;MVT&quot;,&quot;decisionTable&quot;:{&quot;rule_execution_set&quot;:[{&quot;criteria&quot;:{&quot;id&quot;:17,&quot;name&quot;:&quot;paxType&quot;,&quot;type&quot;:&quot;LIST&quot;,&quot;values&quot;:[&quot;PASSENGER_TYPE.NORMAL_PASSENGER&quot;]}}]},&quot;description&quot;:&quot;Ø·Ø§Ù&#x82;Ù&#x85; Ø§Ù&#x84;Ø·Ù&#x8a;Ø§Ø±Ø© Ù&#x84;Ø§ Ù&#x8a;Ø¬Ù&#x88;Ø² Ø§Ø®Ø° ØµÙ&#x88;Ø±Ø©&quot;,&quot;id&quot;:&quot;a8350e97-7b7e-450a-ae18-a5f3a5ece9ee&quot;,&quot;isVerifiable&quot;:true,&quot;name&quot;:&quot;Ø·Ø§Ù&#x82;Ù&#x85; Ø§Ù&#x84;Ø·Ù&#x8a;Ø§Ø±Ø© Ù&#x84;Ø§ Ù&#x8a;Ø¬Ù&#x88;Ø² Ø§Ø®Ø° ØµÙ&#x88;Ø±Ø©&quot;},{&quot;activated&quot;:false,&quot;applicationDate&quot;:&quot;2021-03-28T15:52:12+02:00&quot;,&quot;businessArea&quot;:&quot;MVT&quot;,&quot;decisionTable&quot;:{&quot;rule_execution_set&quot;:[{&quot;criteria&quot;:{&quot;id&quot;:17,&quot;name&quot;:&quot;paxType&quot;,&quot;type&quot;:&quot;LIST&quot;,&quot;values&quot;:[&quot;PASSENGER_TYPE.NORMAL_PASSENGER&quot;]}}]},&quot;description&quot;:&quot;Ø·Ø§Ù&#x82;Ù&#x85; Ø§Ù&#x84;Ø·Ù&#x8a;Ø§Ø±Ø© Ù&#x84;Ø§ Ù&#x8a;Ø¬Ù&#x88;Ø² Ø§Ø®Ø° Ø§Ù&#x84;Ø¨ØµÙ&#x85;Ø§Øª&quot;,&quot;id&quot;:&quot;078b5f3d-4dd9-47a7-a9e7-1f2556d33589&quot;,&quot;isVerifiable&quot;:true,&quot;name&quot;:&quot;Ø·Ø§Ù&#x82;Ù&#x85; Ø§Ù&#x84;Ø·Ù&#x8a;Ø§Ø±Ø© Ù&#x84;Ø§ Ù&#x8a;Ø¬Ù&#x88;Ø² Ø§Ø®Ø° Ø§Ù&#x84;Ø¨ØµÙ&#x85;Ø§Øª&quot;},{&quot;activated&quot;:false,&quot;applicationDate&quot;:&quot;2021-03-28T15:52:12+02:00&quot;,&quot;businessArea&quot;:&quot;MVT&quot;,&quot;decisionTable&quot;:{&quot;rule_execution_set&quot;:[{&quot;criteria&quot;:{&quot;id&quot;:1,&quot;name&quot;:&quot;nationality&quot;,&quot;type&quot;:&quot;LIST&quot;,&quot;values&quot;:[&quot;COUNTRY.AZE&quot;]}},{&quot;criteria&quot;:{&quot;id&quot;:14,&quot;name&quot;:&quot;sex&quot;,&quot;type&quot;:&quot;LIST&quot;,&quot;values&quot;:[&quot;SEX.M&quot;]}},{&quot;criteria&quot;:{&quot;id&quot;:12,&quot;name&quot;:&quot;age&quot;,&quot;type&quot;:&quot;RANGE&quot;,&quot;values&quot;:[&quot;25&quot;]}}]},&quot;description&quot;:&quot;Ù&#x85;Ù&#x88;Ù&#x82;Ù&#x81; Ø§Ù&#x84;ØªØ¬Ù&#x86;Ù&#x8a;Ø¯&quot;,&quot;id&quot;:&quot;9923df67-8ca0-428f-918b-006f8d170368&quot;,&quot;isVerifiable&quot;:true,&quot;name&quot;:&quot;Ù&#x85;Ù&#x88;Ù&#x82;Ù&#x81; Ø§Ù&#x84;ØªØ¬Ù&#x86;Ù&#x8a;Ø¯&quot;},{&quot;activated&quot;:false,&quot;applicationDate&quot;:&quot;2021-03-30T00:00:00+02:00&quot;,&quot;businessArea&quot;:&quot;MVT&quot;,&quot;decisionTable&quot;:{&quot;rule_execution_set&quot;:[{&quot;criteria&quot;:{&quot;id&quot;:1,&quot;name&quot;:&quot;nationality&quot;,&quot;type&quot;:&quot;LIST&quot;,&quot;values&quot;:[&quot;COUNTRY.AZE&quot;]}}]},&quot;description&quot;:&quot;Ù&#x88;ØµÙ&#x81; Ù&#x88;ØµÙ&#x81;&quot;,&quot;id&quot;:&quot;32301c0d-fe0f-4d19-980c-281b206173b4&quot;,&quot;isVerifiable&quot;:true,&quot;name&quot;:&quot;Ø§Ù&#x84;Ø¬Ù&#x86;Ø³Ù&#x8a;Ø©&quot;}]</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">http</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">businessrules_verify/v1/business_rules-verify/1/bulk-verify</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="activePermits" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&quot;nationality&quot;:&quot;COUNTRY.AZE&quot;,&quot;sex&quot;:&quot;SEX.M&quot;,&quot;dateOfBirth&quot;:&quot;19970901&quot;,&quot;destination&quot;:&quot;COUNTRY.ETH&quot;,&quot;travelReason&quot;:&quot;&quot;,&quot;passportNo&quot;:&quot;HFFF&quot;,&quot;nid&quot;:null}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">http</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">movement_crud/v1/permit/ACTIVE_PERMITS/activePermits</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="list_movements" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="1" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">1</stringProp>
                    <stringProp name="Argument.value">1</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="movementFlightInformationFlightNumber" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">movementFlightInformationFlightNumber</stringProp>
                    <stringProp name="Argument.value">QC1</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="flightDate" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">flightDate</stringProp>
                    <stringProp name="Argument.value">2021-09-06T12:00:00Z</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="portName" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">portName</stringProp>
                    <stringProp name="Argument.value">ASSH</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="tdIssuingCountry" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">tdIssuingCountry</stringProp>
                    <stringProp name="Argument.value">COUNTRY.AZE</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="flightType" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">flightType</stringProp>
                    <stringProp name="Argument.value">FLIGHT_TYPE.DEPARTURE</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="tdNumber" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">tdNumber</stringProp>
                    <stringProp name="Argument.value">HFFF</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="movementSourceType" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">movementSourceType</stringProp>
                    <stringProp name="Argument.value">PORT</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="ignoreFlightList" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">ignoreFlightList</stringProp>
                    <stringProp name="Argument.value">true</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">http</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">movement_crud/v1/movement/513f6507-72d6-485c-ac68-b536b37a3bf0/list_movements</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="check_wl" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="birthdate" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">birthdate</stringProp>
                    <stringProp name="Argument.value">19970901</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="nationality" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">nationality</stringProp>
                    <stringProp name="Argument.value">COUNTRY.AZE</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="wltype" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">wltype</stringProp>
                    <stringProp name="Argument.value">WL1</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="name" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">name</stringProp>
                    <stringProp name="Argument.value">DHHHH JJIIIIII</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="operatorId" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">operatorId</stringProp>
                    <stringProp name="Argument.value">test5</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">http</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">watchlist_crud/v1/watchlist/blacklist_person/ea9c49e0-b4db-e534-bc4d-cbfea59b2d1e/check_wl</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="bulk-verify" enabled="false">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">[{&quot;activated&quot;:false,&quot;applicationDate&quot;:&quot;2021-06-01T00:00:00+02:00&quot;,&quot;businessArea&quot;:&quot;MVT&quot;,&quot;decisionTable&quot;:{&quot;rule_execution_set&quot;:[{&quot;criteria&quot;:{&quot;id&quot;:1,&quot;name&quot;:&quot;nationality&quot;,&quot;type&quot;:&quot;LIST&quot;,&quot;values&quot;:[&quot;COUNTRY.AZE&quot;]}}]},&quot;description&quot;:&quot;Ø´Ø§Ø¯Ù&#x8a; ØªØ³Øª&quot;,&quot;id&quot;:&quot;280cd980-205e-4b3a-9364-6c3f37313e7b&quot;,&quot;isVerifiable&quot;:true,&quot;name&quot;:&quot;Ø´Ø§Ø¯Ù&#x8a; Ø´Ø§Ø¯Ù&#x8a;&quot;},{&quot;activated&quot;:false,&quot;applicationDate&quot;:&quot;2021-05-01T00:00:00+02:00&quot;,&quot;businessArea&quot;:&quot;MVT&quot;,&quot;decisionTable&quot;:{&quot;rule_execution_set&quot;:[{&quot;criteria&quot;:{&quot;id&quot;:1,&quot;name&quot;:&quot;nationality&quot;,&quot;type&quot;:&quot;LIST&quot;,&quot;values&quot;:[&quot;COUNTRY.AZE&quot;]}}]},&quot;description&quot;:&quot;Ø¬Ù&#x86;Ø³Ù&#x8a;Ø§Øª Ù&#x8a;Ø¬Ø¨ ØªØ³Ø¬Ù&#x8a;Ù&#x84;Ù&#x87;Ø§&quot;,&quot;id&quot;:&quot;a4d6dcff-c932-4db0-88df-9346cc5e4d4e&quot;,&quot;isVerifiable&quot;:true,&quot;name&quot;:&quot;Ù&#x8a;Ø¬Ø¨ ØªØ³Ø¬Ù&#x8a;Ù&#x84;&quot;},{&quot;activated&quot;:false,&quot;applicationDate&quot;:&quot;2021-04-19T00:00:00+02:00&quot;,&quot;businessArea&quot;:&quot;MVT&quot;,&quot;decisionTable&quot;:{&quot;rule_execution_set&quot;:[{&quot;criteria&quot;:{&quot;id&quot;:45,&quot;name&quot;:&quot;militaryTravelStatusExpirationDate&quot;,&quot;type&quot;:&quot;DATE&quot;}}]},&quot;description&quot;:&quot;Ù&#x88;ØµÙ&#x81; Ø§Ù&#x87;Ù&#x85; Ø§Ù&#x87;Ù&#x85; 12233333333333&quot;,&quot;id&quot;:&quot;42e3bbf9-02fa-43ab-8049-494ae78e4a39&quot;,&quot;isVerifiable&quot;:true,&quot;name&quot;:&quot;Ø§Ù&#x87;Ù&#x85; 1&quot;},{&quot;activated&quot;:false,&quot;applicationDate&quot;:&quot;2021-03-29T00:00:00+02:00&quot;,&quot;businessArea&quot;:&quot;MVT&quot;,&quot;decisionTable&quot;:{&quot;rule_execution_set&quot;:[{&quot;criteria&quot;:{&quot;id&quot;:1,&quot;name&quot;:&quot;nationality&quot;,&quot;type&quot;:&quot;LIST&quot;,&quot;values&quot;:[&quot;COUNTRY.AZE&quot;]}}]},&quot;description&quot;:&quot;Ù&#x88;ØµÙ&#x81; Ù&#x88;ØµÙ&#x81;&quot;,&quot;id&quot;:&quot;6e6a6e0a-2997-44ce-85de-6b93160dfa07&quot;,&quot;isVerifiable&quot;:true,&quot;name&quot;:&quot;Ù&#x82;Ø§Ø¹Ø¯Ø© Ø¹Ù&#x85;Ù&#x84;&quot;},{&quot;activated&quot;:false,&quot;applicationDate&quot;:&quot;2021-03-28T15:52:12+02:00&quot;,&quot;businessArea&quot;:&quot;MVT&quot;,&quot;decisionTable&quot;:{&quot;rule_execution_set&quot;:[{&quot;criteria&quot;:{&quot;id&quot;:1,&quot;name&quot;:&quot;nationality&quot;,&quot;type&quot;:&quot;LIST&quot;,&quot;values&quot;:[&quot;COUNTRY.AZE&quot;]}}]},&quot;description&quot;:&quot;Ù&#x82;Ø§Ø¹Ø¯Ø© Ø§Ù&#x84;Ù&#x81;Ù&#x8a;Ø²Ø§ Ù&#x84;Ù&#x84;Ù&#x85;ØµØ±Ù&#x8a;Ù&#x8a;Ù&#x86;&quot;,&quot;id&quot;:&quot;e02b3f0c-c283-471b-a5ca-b82ba62ab3cd&quot;,&quot;isVerifiable&quot;:true,&quot;name&quot;:&quot;Ù&#x82;Ø§Ø¹Ø¯Ø© Ø§Ù&#x84;Ù&#x81;Ù&#x8a;Ø²Ø§ Ù&#x84;Ù&#x84;Ù&#x85;ØµØ±Ù&#x8a;Ù&#x8a;Ù&#x86;&quot;},{&quot;activated&quot;:false,&quot;applicationDate&quot;:&quot;2021-03-28T15:52:12+02:00&quot;,&quot;businessArea&quot;:&quot;MVT&quot;,&quot;decisionTable&quot;:{&quot;rule_execution_set&quot;:[{&quot;criteria&quot;:{&quot;id&quot;:1,&quot;name&quot;:&quot;nationality&quot;,&quot;type&quot;:&quot;LIST&quot;,&quot;values&quot;:[&quot;COUNTRY.AZE&quot;]}}]},&quot;description&quot;:&quot;Ù&#x82;Ø§Ø¹Ø¯Ø© Ø§Ù&#x84;Ø¨ØµÙ&#x85;Ø§Øª Ù&#x84;Ù&#x84;Ù&#x85;ØµØ±Ù&#x8a;Ù&#x8a;Ù&#x86;&quot;,&quot;id&quot;:&quot;718b1eb3-a29e-4c5a-a183-e923e2da2392&quot;,&quot;isVerifiable&quot;:true,&quot;name&quot;:&quot; Ù&#x82;Ø§Ø¹Ø¯Ø© Ø§Ù&#x84;Ø¨ØµÙ&#x85;Ø§Øª Ù&#x84;Ù&#x84;Ù&#x85;ØµØ±Ù&#x8a;Ù&#x8a;Ù&#x86;&quot;},{&quot;activated&quot;:false,&quot;applicationDate&quot;:&quot;2021-03-28T15:52:12+02:00&quot;,&quot;businessArea&quot;:&quot;MVT&quot;,&quot;decisionTable&quot;:{&quot;rule_execution_set&quot;:[{&quot;criteria&quot;:{&quot;id&quot;:12,&quot;name&quot;:&quot;age&quot;,&quot;type&quot;:&quot;RANGE&quot;,&quot;values&quot;:[&quot;25&quot;]}}]},&quot;description&quot;:&quot;Ù&#x85;Ù&#x86;Ø¹ Ø£Ø®Ø° Ø§Ù&#x84;Ø¨ØµÙ&#x85;Ø§Øª Ù&#x84;Ù&#x84;Ø£Ø·Ù&#x81;Ø§Ù&#x84;&quot;,&quot;id&quot;:&quot;4df82cbe-8762-41dd-bd9c-e405adba7aab&quot;,&quot;isVerifiable&quot;:true,&quot;name&quot;:&quot;Ù&#x85;Ù&#x86;Ø¹ Ø£Ø®Ø° Ø§Ù&#x84;Ø¨ØµÙ&#x85;Ø§Øª Ù&#x84;Ù&#x84;Ø£Ø·Ù&#x81;Ø§Ù&#x84;&quot;},{&quot;activated&quot;:false,&quot;applicationDate&quot;:&quot;2021-03-28T15:52:12+02:00&quot;,&quot;businessArea&quot;:&quot;MVT&quot;,&quot;decisionTable&quot;:{&quot;rule_execution_set&quot;:[{&quot;criteria&quot;:{&quot;id&quot;:12,&quot;name&quot;:&quot;age&quot;,&quot;type&quot;:&quot;RANGE&quot;,&quot;values&quot;:[&quot;25&quot;]}}]},&quot;description&quot;:&quot;Ù&#x85;Ù&#x86;Ø¹ Ø£Ø®Ø° Ø§Ù&#x84;ØµÙ&#x88;Ø±Ø© Ù&#x84;Ù&#x84;Ø£Ø·Ù&#x81;Ø§Ù&#x84;&quot;,&quot;id&quot;:&quot;4df82cbe-8762-41dd-bd9c-e405adba7aa1&quot;,&quot;isVerifiable&quot;:true,&quot;name&quot;:&quot;Ù&#x85;Ù&#x86;Ø¹ Ø£Ø®Ø° Ø§Ù&#x84;ØµÙ&#x88;Ø±Ø© Ù&#x84;Ù&#x84;Ø£Ø·Ù&#x81;Ø§Ù&#x84;&quot;},{&quot;activated&quot;:false,&quot;applicationDate&quot;:&quot;2021-03-28T15:52:12+02:00&quot;,&quot;businessArea&quot;:&quot;MVT&quot;,&quot;decisionTable&quot;:{&quot;rule_execution_set&quot;:[{&quot;criteria&quot;:{&quot;id&quot;:17,&quot;name&quot;:&quot;paxType&quot;,&quot;type&quot;:&quot;LIST&quot;,&quot;values&quot;:[&quot;PASSENGER_TYPE.NORMAL_PASSENGER&quot;]}}]},&quot;description&quot;:&quot;Ù&#x84;Ø§ Ù&#x8a;Ø¬Ù&#x88;Ø² Ù&#x84;Ù&#x87; Ø§Ø®Ø° Ø§Ù&#x84;Ø¨ØµÙ&#x85;Ø§Øª&quot;,&quot;id&quot;:&quot;18bd1f93-eedb-499e-b2d7-82c0ee9cbb95&quot;,&quot;isVerifiable&quot;:true,&quot;name&quot;:&quot;Ø±Ø§Ù&#x83;Ø¨ Ù&#x87;Ø§Ù&#x85; &quot;},{&quot;activated&quot;:false,&quot;applicationDate&quot;:&quot;2021-03-28T15:52:12+02:00&quot;,&quot;businessArea&quot;:&quot;MVT&quot;,&quot;decisionTable&quot;:{&quot;rule_execution_set&quot;:[{&quot;criteria&quot;:{&quot;id&quot;:17,&quot;name&quot;:&quot;paxType&quot;,&quot;type&quot;:&quot;LIST&quot;,&quot;values&quot;:[&quot;PASSENGER_TYPE.NORMAL_PASSENGER&quot;]}}]},&quot;description&quot;:&quot;Ø±Ø§Ù&#x83;Ø¨ Ù&#x87;Ø§Ù&#x85; Ù&#x84;Ù&#x8a;Ø³ Ù&#x84;Ù&#x87; Ø§Ø®Ø° Ø§Ù&#x84;ØµÙ&#x88;Ø±Ø©&quot;,&quot;id&quot;:&quot;97cb8faf-436f-4896-82fc-8faa4e305384&quot;,&quot;isVerifiable&quot;:true,&quot;name&quot;:&quot;Ø±Ø§Ù&#x83;Ø¨ Ù&#x87;Ø§Ù&#x85; Ù&#x84;Ù&#x8a;Ø³ Ù&#x84;Ù&#x87; Ø§Ø®Ø° Ø§Ù&#x84;ØµÙ&#x88;Ø±Ø©&quot;},{&quot;activated&quot;:false,&quot;applicationDate&quot;:&quot;2021-03-28T15:52:12+02:00&quot;,&quot;businessArea&quot;:&quot;MVT&quot;,&quot;decisionTable&quot;:{&quot;rule_execution_set&quot;:[{&quot;criteria&quot;:{&quot;id&quot;:17,&quot;name&quot;:&quot;paxType&quot;,&quot;type&quot;:&quot;LIST&quot;,&quot;values&quot;:[&quot;PASSENGER_TYPE.NORMAL_PASSENGER&quot;]}}]},&quot;description&quot;:&quot;Ø·Ø§Ù&#x82;Ù&#x85; Ø§Ù&#x84;Ø·Ù&#x8a;Ø§Ø±Ø© Ù&#x84;Ø§ Ù&#x8a;Ø¬Ù&#x88;Ø² Ø§Ø®Ø° ØµÙ&#x88;Ø±Ø©&quot;,&quot;id&quot;:&quot;a8350e97-7b7e-450a-ae18-a5f3a5ece9ee&quot;,&quot;isVerifiable&quot;:true,&quot;name&quot;:&quot;Ø·Ø§Ù&#x82;Ù&#x85; Ø§Ù&#x84;Ø·Ù&#x8a;Ø§Ø±Ø© Ù&#x84;Ø§ Ù&#x8a;Ø¬Ù&#x88;Ø² Ø§Ø®Ø° ØµÙ&#x88;Ø±Ø©&quot;},{&quot;activated&quot;:false,&quot;applicationDate&quot;:&quot;2021-03-28T15:52:12+02:00&quot;,&quot;businessArea&quot;:&quot;MVT&quot;,&quot;decisionTable&quot;:{&quot;rule_execution_set&quot;:[{&quot;criteria&quot;:{&quot;id&quot;:17,&quot;name&quot;:&quot;paxType&quot;,&quot;type&quot;:&quot;LIST&quot;,&quot;values&quot;:[&quot;PASSENGER_TYPE.NORMAL_PASSENGER&quot;]}}]},&quot;description&quot;:&quot;Ø·Ø§Ù&#x82;Ù&#x85; Ø§Ù&#x84;Ø·Ù&#x8a;Ø§Ø±Ø© Ù&#x84;Ø§ Ù&#x8a;Ø¬Ù&#x88;Ø² Ø§Ø®Ø° Ø§Ù&#x84;Ø¨ØµÙ&#x85;Ø§Øª&quot;,&quot;id&quot;:&quot;078b5f3d-4dd9-47a7-a9e7-1f2556d33589&quot;,&quot;isVerifiable&quot;:true,&quot;name&quot;:&quot;Ø·Ø§Ù&#x82;Ù&#x85; Ø§Ù&#x84;Ø·Ù&#x8a;Ø§Ø±Ø© Ù&#x84;Ø§ Ù&#x8a;Ø¬Ù&#x88;Ø² Ø§Ø®Ø° Ø§Ù&#x84;Ø¨ØµÙ&#x85;Ø§Øª&quot;},{&quot;activated&quot;:false,&quot;applicationDate&quot;:&quot;2021-03-28T15:52:12+02:00&quot;,&quot;businessArea&quot;:&quot;MVT&quot;,&quot;decisionTable&quot;:{&quot;rule_execution_set&quot;:[{&quot;criteria&quot;:{&quot;id&quot;:1,&quot;name&quot;:&quot;nationality&quot;,&quot;type&quot;:&quot;LIST&quot;,&quot;values&quot;:[&quot;COUNTRY.AZE&quot;]}},{&quot;criteria&quot;:{&quot;id&quot;:14,&quot;name&quot;:&quot;sex&quot;,&quot;type&quot;:&quot;LIST&quot;,&quot;values&quot;:[&quot;SEX.M&quot;]}},{&quot;criteria&quot;:{&quot;id&quot;:12,&quot;name&quot;:&quot;age&quot;,&quot;type&quot;:&quot;RANGE&quot;,&quot;values&quot;:[&quot;25&quot;]}}]},&quot;description&quot;:&quot;Ù&#x85;Ù&#x88;Ù&#x82;Ù&#x81; Ø§Ù&#x84;ØªØ¬Ù&#x86;Ù&#x8a;Ø¯&quot;,&quot;id&quot;:&quot;9923df67-8ca0-428f-918b-006f8d170368&quot;,&quot;isVerifiable&quot;:true,&quot;name&quot;:&quot;Ù&#x85;Ù&#x88;Ù&#x82;Ù&#x81; Ø§Ù&#x84;ØªØ¬Ù&#x86;Ù&#x8a;Ø¯&quot;},{&quot;activated&quot;:false,&quot;applicationDate&quot;:&quot;2021-03-30T00:00:00+02:00&quot;,&quot;businessArea&quot;:&quot;MVT&quot;,&quot;decisionTable&quot;:{&quot;rule_execution_set&quot;:[{&quot;criteria&quot;:{&quot;id&quot;:1,&quot;name&quot;:&quot;nationality&quot;,&quot;type&quot;:&quot;LIST&quot;,&quot;values&quot;:[&quot;COUNTRY.AZE&quot;]}}]},&quot;description&quot;:&quot;Ù&#x88;ØµÙ&#x81; Ù&#x88;ØµÙ&#x81;&quot;,&quot;id&quot;:&quot;32301c0d-fe0f-4d19-980c-281b206173b4&quot;,&quot;isVerifiable&quot;:true,&quot;name&quot;:&quot;Ø§Ù&#x84;Ø¬Ù&#x86;Ø³Ù&#x8a;Ø©&quot;}]</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">http</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">businessrules_verify/v1/business_rules-verify/1/bulk-verify</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="getOpenFlightById" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="flightId" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">flightId</stringProp>
                    <stringProp name="Argument.value">220f03bd-a4fa-4606-8278-ffd682578627</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">http</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">flightmanagement_crud/v1/flight/FLIGHT/getOpenFlightById</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="list_movements" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="orderType" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">orderType</stringProp>
                    <stringProp name="Argument.value">DESC</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="1" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">1</stringProp>
                    <stringProp name="Argument.value">1</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="notificationRequired" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">notificationRequired</stringProp>
                    <stringProp name="Argument.value">true</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="firstLaneOfficer" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">firstLaneOfficer</stringProp>
                    <stringProp name="Argument.value">test5</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="maxResults" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">maxResults</stringProp>
                    <stringProp name="Argument.value">10</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="orderBy" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">orderBy</stringProp>
                    <stringProp name="Argument.value">creationDate</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="appendLivePortrait" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">appendLivePortrait</stringProp>
                    <stringProp name="Argument.value">true</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="portName" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">portName</stringProp>
                    <stringProp name="Argument.value">ASSH</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="notificationRead" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">notificationRead</stringProp>
                    <stringProp name="Argument.value">false</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="movementSourceType" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">movementSourceType</stringProp>
                    <stringProp name="Argument.value">PORT</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="ignoreFlightList" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">ignoreFlightList</stringProp>
                    <stringProp name="Argument.value">true</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">http</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">movement_crud/v1/movement/8e419cf5-c5de-0896-c8ea-547b8eee7781/list_movements</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="add_new_movement" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
  &quot;foreigner&quot;: {&#xd;
      &quot;biometricsCaptureList&quot;: {&#xd;
          &quot;fingerPrintExceptionCaseList&quot;: [&#xd;
              {&#xd;
                  &quot;fingerPrintImageType&quot;: &quot;RIGHT_FORE&quot;,&#xd;
                  &quot;printExceptionType&quot;: &quot;DAMAGED&quot;&#xd;
              },&#xd;
              {&#xd;
                  &quot;fingerPrintImageType&quot;: &quot;RIGHT_MIDDLE&quot;,&#xd;
                  &quot;printExceptionType&quot;: &quot;DAMAGED&quot;&#xd;
              },&#xd;
              {&#xd;
                  &quot;fingerPrintImageType&quot;: &quot;RIGHT_RING&quot;,&#xd;
                  &quot;printExceptionType&quot;: &quot;DAMAGED&quot;&#xd;
              },&#xd;
              {&#xd;
                  &quot;fingerPrintImageType&quot;: &quot;RIGHT_LITTLE&quot;,&#xd;
                  &quot;printExceptionType&quot;: &quot;DAMAGED&quot;&#xd;
              },&#xd;
              {&#xd;
                  &quot;fingerPrintImageType&quot;: &quot;LEFT_FORE&quot;,&#xd;
                  &quot;printExceptionType&quot;: &quot;DAMAGED&quot;&#xd;
              },&#xd;
              {&#xd;
                  &quot;fingerPrintImageType&quot;: &quot;LEFT_MIDDLE&quot;,&#xd;
                  &quot;printExceptionType&quot;: &quot;DAMAGED&quot;&#xd;
              },&#xd;
              {&#xd;
                  &quot;fingerPrintImageType&quot;: &quot;LEFT_RING&quot;,&#xd;
                  &quot;printExceptionType&quot;: &quot;DAMAGED&quot;&#xd;
              },&#xd;
              {&#xd;
                  &quot;fingerPrintImageType&quot;: &quot;LEFT_LITTLE&quot;,&#xd;
                  &quot;printExceptionType&quot;: &quot;DAMAGED&quot;&#xd;
              }&#xd;
          ],&#xd;
          &quot;fingerPrintsList&quot;: []&#xd;
      },&#xd;
      &quot;businessAreaOrigin&quot;: &quot;MVT&quot;,&#xd;
      &quot;createByOperatorId&quot;: &quot;test5&quot;,&#xd;
      &quot;dateOfBirth&quot;: &quot;19970901&quot;,&#xd;
      &quot;fId&quot;: &quot;&quot;,&#xd;
      &quot;fullLatinName&quot;: &quot;DHHHH JJIIIIII&quot;,&#xd;
      &quot;isUnknownDateOfBirth&quot;: false,&#xd;
      &quot;modifyByOperatorId&quot;: &quot;test5&quot;,&#xd;
      &quot;nId&quot;: null,&#xd;
      &quot;nationality&quot;: &quot;COUNTRY.AZE&quot;,&#xd;
      &quot;recordStatus&quot;: &quot;ACTIVATED&quot;,&#xd;
      &quot;sex&quot;: &quot;SEX.M&quot;&#xd;
  },&#xd;
  &quot;movement&quot;: {&#xd;
      &quot;firstLaneMovementCheckResult&quot;: {&#xd;
          &quot;eVisaCheckResult&quot;: &quot;VALID_VISA&quot;,&#xd;
          &quot;fingerPrintMatchingStatus&quot;: &quot;NOT_VERIFIED&quot;,&#xd;
          &quot;militaryTravelCheckResult&quot;: &quot;0&quot;,&#xd;
          &quot;movementCheckResultDate&quot;: &quot;20210906&quot;,&#xd;
          &quot;nationalTdCheckResult&quot;: &quot;NOT_VERIFIED&quot;,&#xd;
          &quot;operatorID&quot;: &quot;test5&quot;,&#xd;
          &quot;portraitStatus&quot;: &quot;SKIPPED&quot;,&#xd;
          &quot;stationID&quot;: &quot;ASSH054&quot;,&#xd;
          &quot;tdChipCheckResult&quot;: &quot;NOT_VERIFIED&quot;,&#xd;
          &quot;tdExpiryCheckResult&quot;: &quot;VALID&quot;,&#xd;
          &quot;tdOpticalCheckResult&quot;: &quot;NOT_VERIFIED&quot;,&#xd;
          &quot;watchListCheckResult&quot;: [&#xd;
              {&#xd;
                  &quot;dateOfBirth&quot;: &quot;19970901&quot;,&#xd;
                  &quot;fullLatinName&quot;: &quot;DHHHH JJIIIIII&quot;,&#xd;
                  &quot;name&quot;: &quot;DHHHH JJIIIIII&quot;,&#xd;
                  &quot;personWatchListCheckResult&quot;: &quot;0&quot;,&#xd;
                  &quot;travelDocumentNationality&quot;: &quot;COUNTRY.AZE&quot;,&#xd;
                  &quot;travelDocumentNumber&quot;: &quot;HFFF&quot;,&#xd;
                  &quot;travelDocumentWatchListCheckResult&quot;: &quot;0&quot;&#xd;
              }&#xd;
          ]&#xd;
      },&#xd;
      &quot;flightInformation&quot;: {&#xd;
          &quot;country&quot;: &quot;COUNTRY.ETH&quot;,&#xd;
          &quot;creationPort&quot;: {&#xd;
              &quot;portName&quot;: &quot;ASSH&quot;,&#xd;
              &quot;portType&quot;: &quot;AIRPORT&quot;&#xd;
          },&#xd;
          &quot;flightType&quot;: &quot;FLIGHT_TYPE.DEPARTURE&quot;,&#xd;
          &quot;internationalPort&quot;: &quot;INTERNATIONAL_PORT.QQQQQ&quot;,&#xd;
          &quot;movementFlightInformationDateOfFlight&quot;: &quot;2021-09-06T12:00:00+02:00&quot;,&#xd;
          &quot;movementFlightInformationDescription&quot;: &quot;Ù&#x85;ØµØ±/Ø§Ø«Ù&#x8a;Ù&#x88;Ø¨Ù&#x89;&quot;,&#xd;
          &quot;movementFlightInformationFlightNumber&quot;: &quot;QC1&quot;,&#xd;
          &quot;movementFlightInformationOperatingCarrierDesignator&quot;: &quot;AIRLINE.93&quot;,&#xd;
          &quot;movementFlightManagementId&quot;: &quot;220f03bd-a4fa-4606-8278-ffd682578627&quot;&#xd;
      },&#xd;
      &quot;fullLatinName&quot;: &quot;${fullLatinNamee}&quot;,&#xd;
      &quot;livePortrait&quot;: {&#xd;
          &quot;portraitType&quot;: &quot;NOT_ACQUIRED&quot;&#xd;
      },&#xd;
      &quot;movementDateOfBirth&quot;: &quot;19970901&quot;,&#xd;
      &quot;movementDecision&quot;: {&#xd;
          &quot;firstLaneComment&quot;: &quot;this passenger not wanted&quot;&#xd;
      },&#xd;
      &quot;movementGate&quot;: &quot;GATE1_Not_Used&quot;,&#xd;
      &quot;movementPort&quot;: {&#xd;
          &quot;portName&quot;: &quot;ASSH&quot;,&#xd;
          &quot;portType&quot;: &quot;AIRPORT&quot;&#xd;
      },&#xd;
      &quot;movementSource&quot;: &quot;BCVI_SYSTEM_V1&quot;,&#xd;
      &quot;movementTerminal&quot;: &quot;TERMINAL.ASSH_DEP_21&quot;,&#xd;
      &quot;movementTravelDocument&quot;: {&#xd;
          &quot;travelDocumentAuthoritySource&quot;: &quot;COUNTRY.AZE&quot;,&#xd;
          &quot;travelDocumentDateOfBirth&quot;: &quot;${birthDate}&quot;,&#xd;
          &quot;travelDocumentDateOfExpiry&quot;: &quot;20300101&quot;,&#xd;
          &quot;travelDocumentImage&quot;: {&#xd;
              &quot;travelDocumentImageAcquisitionSource&quot;: &quot;MANUAL_ACQUISITION&quot;,&#xd;
              &quot;travelDocumentImageBinary_base64&quot;: null&#xd;
          },&#xd;
          &quot;travelDocumentNumber&quot;: &quot;${td_no}&quot;,&#xd;
          &quot;travelDocumentPlaceOfBirth&quot;: &quot;COUNTRY.AZE&quot;,&#xd;
          &quot;travelDocumentPortrait&quot;: null,&#xd;
          &quot;travelDocumentPrimaryIdentifier&quot;: &quot;${firstIdentifier}&quot;,&#xd;
          &quot;travelDocumentSecondaryIdentifier&quot;: &quot;${secondIdentifier}&quot;,&#xd;
          &quot;travelDocumentSex&quot;: &quot;SEX.M&quot;,&#xd;
          &quot;travelDocumentStatus&quot;: &quot;ACTIVATED&quot;,&#xd;
          &quot;travelDocumentType&quot;: &quot;TD_TYPE.STANDARD_PASSPORT&quot;&#xd;
      },&#xd;
      &quot;movementType&quot;: &quot;FOREIGNER_EXIT_FIRST_LANE&quot;,&#xd;
      &quot;movementVisaType&quot;: &quot;GULF_STAMP&quot;,&#xd;
      &quot;officerID&quot;: &quot;test5&quot;,&#xd;
      &quot;passengerType&quot;: &quot;PASSENGER_TYPE.NORMAL_PASSENGER&quot;,&#xd;
      &quot;secondLaneMovementCheckResult&quot;: null,&#xd;
      &quot;stationID&quot;: &quot;ASSH054&quot;,&#xd;
      &quot;visaToLegacy&quot;: {}&#xd;
  }&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">http</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">movement_crud/v1/movement/ea9c49e0-b4db-e534-bc4d-cbfea59b2d1e/add_new_movement</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Check if Add Successfully" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-1447651972">foreignerId</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
              </ResponseAssertion>
              <hashTree/>
              <RandomVariableConfig guiclass="TestBeanGUI" testclass="RandomVariableConfig" testname="Random Variable" enabled="true">
                <stringProp name="variableName">td_no</stringProp>
                <stringProp name="outputFormat"></stringProp>
                <stringProp name="minimumValue">1</stringProp>
                <stringProp name="maximumValue">10000000000</stringProp>
                <stringProp name="randomSeed"></stringProp>
                <boolProp name="perThread">false</boolProp>
              </RandomVariableConfig>
              <hashTree/>
              <BeanShellPreProcessor guiclass="TestBeanGUI" testclass="BeanShellPreProcessor" testname="BeanShell PreProcessor" enabled="true">
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <boolProp name="resetInterpreter">false</boolProp>
                <stringProp name="script"></stringProp>
              </BeanShellPreProcessor>
              <hashTree/>
              <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor" enabled="true">
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="script">def generateEnglishName() {
    String name = &quot;&quot;
    Random rn = new Random()
      for(int i = 0;i&lt;10;i++) {
         name+=((char)(rn.nextInt(25)+65))
      }
      return name
}

def generateArabicName() {
    String name = &quot;&quot;
    Random rn = new Random()
      for(int i = 0;i&lt;10;i++) {
         name+=((char)(rn.nextInt(25)+1569))
      }
      return name
}
def firstIdentifier=generateEnglishName()
vars.put(&quot;firstIdentifier&quot;, firstIdentifier)
def secondIdentifier=generateEnglishName()
vars.put(&quot;secondIdentifier&quot;, secondIdentifier)

def generateFullEnglishName() {
    return firstIdentifier + &quot; &quot; + secondIdentifier  + &quot; &quot; + generateEnglishName()  + &quot; &quot; + generateEnglishName() 
}

def generateFullArabicName() {
    return generateArabicName() + &quot; &quot; + generateArabicName()  + &quot; &quot; + generateArabicName()  + &quot; &quot; + generateArabicName() 
}
Date randomDate(Range&lt;Date&gt; range) {
    range.from + new Random().nextInt(range.to - range.from + 1)
}
def start = Date.parse(&apos;yyyy-MM-dd&apos;, &apos;1300-01-01&apos;)
def end   = Date.parse(&apos;yyyy-MM-dd&apos;, &apos;2022-12-31&apos;)
def date= randomDate(start..end).format(&apos;YYYYMMdd&apos;)
def t1=generateFullEnglishName()
def t2=generateFullArabicName()
vars.put(&quot;fullLatinNamee&quot;, t1)
vars.put(&quot;arabicName&quot;, t2)
vars.put(&quot;birthDate&quot;, date)
log.info(t1)
log.info(t2)</stringProp>
                <stringProp name="scriptLanguage">groovy</stringProp>
              </JSR223PreProcessor>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="list_movements" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="orderType" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">orderType</stringProp>
                    <stringProp name="Argument.value">DESC</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="1" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">1</stringProp>
                    <stringProp name="Argument.value">1</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="notificationRequired" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">notificationRequired</stringProp>
                    <stringProp name="Argument.value">true</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="firstLaneOfficer" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">firstLaneOfficer</stringProp>
                    <stringProp name="Argument.value">test5</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="maxResults" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">maxResults</stringProp>
                    <stringProp name="Argument.value">10</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="orderBy" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">orderBy</stringProp>
                    <stringProp name="Argument.value">creationDate</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="appendLivePortrait" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">appendLivePortrait</stringProp>
                    <stringProp name="Argument.value">true</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="portName" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">portName</stringProp>
                    <stringProp name="Argument.value">ASSH</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="notificationRead" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">notificationRead</stringProp>
                    <stringProp name="Argument.value">false</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="movementSourceType" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">movementSourceType</stringProp>
                    <stringProp name="Argument.value">PORT</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="ignoreFlightList" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">ignoreFlightList</stringProp>
                    <stringProp name="Argument.value">true</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">http</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">movement_crud/v1/movement/8e419cf5-c5de-0896-c8ea-547b8eee7781/list_movements</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="list_movements" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="orderType" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">orderType</stringProp>
                    <stringProp name="Argument.value">DESC</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="1" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">1</stringProp>
                    <stringProp name="Argument.value">1</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="notificationRequired" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">notificationRequired</stringProp>
                    <stringProp name="Argument.value">true</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="firstLaneOfficer" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">firstLaneOfficer</stringProp>
                    <stringProp name="Argument.value">test5</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="maxResults" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">maxResults</stringProp>
                    <stringProp name="Argument.value">10</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="orderBy" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">orderBy</stringProp>
                    <stringProp name="Argument.value">creationDate</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="appendLivePortrait" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">appendLivePortrait</stringProp>
                    <stringProp name="Argument.value">true</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="portName" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">portName</stringProp>
                    <stringProp name="Argument.value">ASSH</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="notificationRead" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">notificationRead</stringProp>
                    <stringProp name="Argument.value">false</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="movementSourceType" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">movementSourceType</stringProp>
                    <stringProp name="Argument.value">PORT</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="ignoreFlightList" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">ignoreFlightList</stringProp>
                    <stringProp name="Argument.value">true</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">http</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">movement_crud/v1/movement/8e419cf5-c5de-0896-c8ea-547b8eee7781/list_movements</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
          </hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="arriving_vip" enabled="false">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">true</boolProp>
          </TransactionController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="get_configuration" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="subSystem" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">subSystem</stringProp>
                    <stringProp name="Argument.value">MOVEMENT</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="context" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">context</stringProp>
                    <stringProp name="Argument.value">FRONTEND</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">http</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">movement_crud/v1/movement/get_configuration</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="business_rules-verify" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&quot;businessArea&quot;:&quot;MVT&quot;,&quot;port&quot;:&quot;ASSH&quot;}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">http</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">businessrules_verify/v1/business_rules-verify/17a1b4c0-a774-8828-8dea-da3f4d21c641/search</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="getOpenFlights" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="creationPort" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">creationPort</stringProp>
                    <stringProp name="Argument.value">ASSH</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="flightType" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">flightType</stringProp>
                    <stringProp name="Argument.value">FLIGHT_TYPE.ARRIVAL</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">http</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">flightmanagement_crud/v1/flight/d34aebda-744e-f44d-b64a-9d894be1e95a/getOpenFlights</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="get_recent_flights" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="maxResults" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">maxResults</stringProp>
                    <stringProp name="Argument.value">10</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="flightType" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">flightType</stringProp>
                    <stringProp name="Argument.value">FLIGHT_TYPE.ARRIVAL</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="portId" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">portId</stringProp>
                    <stringProp name="Argument.value">ASSH</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">http</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">movement_crud/v1/movement/d34aebda-744e-f44d-b64a-9d894be1e95a/get_recent_flights</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="getAllBusinessProcessSubtypes" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">http</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">eresidency-bcvi-api/v2/reference-data/getAllBusinessProcessSubtypes</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="getLookuptravelReason" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&quot;flightType&quot;:&quot;ARRIVAL&quot;,&quot;foreigner&quot;:&quot;true&quot;}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">http</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">core_service/v1/lookup/1/getLookup/travelReason</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="lookupinterNationalPort/ARE/AIRPORT" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">http</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">core_service/v1/lookup/d34aebda-744e-f44d-b64a-9d894be1e95a/interNationalPort/ARE/AIRPORT</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="get_flight_metrics_port" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">http</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">movement_crud/v1/movement/d34aebda-744e-f44d-b64a-9d894be1e95a/get_flight_metrics_port/f3f0db29-1ba7-4d85-9b3f-f1717b0fc41a</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="findForeignerOnTravelDocument" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&quot;travelDocumentNumber&quot;:&quot;DJJJJ&quot;,&quot;travelDocumentAuthoritySource&quot;:&quot;COUNTRY.AZE&quot;}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">http</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">movement_crud/v1/foreigner/contextId/findForeignerOnTravelDocument</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="list_movements" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="orderType" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">orderType</stringProp>
                    <stringProp name="Argument.value">DESC</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="1" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">1</stringProp>
                    <stringProp name="Argument.value">1</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="notificationRequired" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">notificationRequired</stringProp>
                    <stringProp name="Argument.value">true</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="firstLaneOfficer" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">firstLaneOfficer</stringProp>
                    <stringProp name="Argument.value">test5</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="maxResults" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">maxResults</stringProp>
                    <stringProp name="Argument.value">10</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="orderBy" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">orderBy</stringProp>
                    <stringProp name="Argument.value">creationDate</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="appendLivePortrait" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">appendLivePortrait</stringProp>
                    <stringProp name="Argument.value">true</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="portName" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">portName</stringProp>
                    <stringProp name="Argument.value">ASSH</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="notificationRead" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">notificationRead</stringProp>
                    <stringProp name="Argument.value">false</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="movementSourceType" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">movementSourceType</stringProp>
                    <stringProp name="Argument.value">PORT</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="ignoreFlightList" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">ignoreFlightList</stringProp>
                    <stringProp name="Argument.value">true</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">http</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">movement_crud/v1/movement/32372528-f896-eb63-6163-584dfba25a34/list_movements</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="countryByCode" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="countryCode" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">countryCode</stringProp>
                    <stringProp name="Argument.value">COUNTRY.AZE</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">http</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">evisa-bcvi-api/v2/reference-data/countryByCode</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="business_rules-verify" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">[{&quot;activated&quot;:false,&quot;applicationDate&quot;:&quot;2021-06-01T00:00:00+02:00&quot;,&quot;businessArea&quot;:&quot;MVT&quot;,&quot;decisionTable&quot;:{&quot;rule_execution_set&quot;:[{&quot;criteria&quot;:{&quot;id&quot;:1,&quot;name&quot;:&quot;nationality&quot;,&quot;type&quot;:&quot;LIST&quot;,&quot;values&quot;:[&quot;COUNTRY.AZE&quot;]}}]},&quot;description&quot;:&quot;Ø´Ø§Ø¯Ù&#x8a; ØªØ³Øª&quot;,&quot;id&quot;:&quot;280cd980-205e-4b3a-9364-6c3f37313e7b&quot;,&quot;isVerifiable&quot;:true,&quot;name&quot;:&quot;Ø´Ø§Ø¯Ù&#x8a; Ø´Ø§Ø¯Ù&#x8a;&quot;},{&quot;activated&quot;:false,&quot;applicationDate&quot;:&quot;2021-05-01T00:00:00+02:00&quot;,&quot;businessArea&quot;:&quot;MVT&quot;,&quot;decisionTable&quot;:{&quot;rule_execution_set&quot;:[{&quot;criteria&quot;:{&quot;id&quot;:1,&quot;name&quot;:&quot;nationality&quot;,&quot;type&quot;:&quot;LIST&quot;,&quot;values&quot;:[&quot;COUNTRY.AZE&quot;]}}]},&quot;description&quot;:&quot;Ø¬Ù&#x86;Ø³Ù&#x8a;Ø§Øª Ù&#x8a;Ø¬Ø¨ ØªØ³Ø¬Ù&#x8a;Ù&#x84;Ù&#x87;Ø§&quot;,&quot;id&quot;:&quot;a4d6dcff-c932-4db0-88df-9346cc5e4d4e&quot;,&quot;isVerifiable&quot;:true,&quot;name&quot;:&quot;Ù&#x8a;Ø¬Ø¨ ØªØ³Ø¬Ù&#x8a;Ù&#x84;&quot;},{&quot;activated&quot;:false,&quot;applicationDate&quot;:&quot;2021-04-19T00:00:00+02:00&quot;,&quot;businessArea&quot;:&quot;MVT&quot;,&quot;decisionTable&quot;:{&quot;rule_execution_set&quot;:[{&quot;criteria&quot;:{&quot;id&quot;:45,&quot;name&quot;:&quot;militaryTravelStatusExpirationDate&quot;,&quot;type&quot;:&quot;DATE&quot;}}]},&quot;description&quot;:&quot;Ù&#x88;ØµÙ&#x81; Ø§Ù&#x87;Ù&#x85; Ø§Ù&#x87;Ù&#x85; 12233333333333&quot;,&quot;id&quot;:&quot;42e3bbf9-02fa-43ab-8049-494ae78e4a39&quot;,&quot;isVerifiable&quot;:true,&quot;name&quot;:&quot;Ø§Ù&#x87;Ù&#x85; 1&quot;},{&quot;activated&quot;:false,&quot;applicationDate&quot;:&quot;2021-03-29T00:00:00+02:00&quot;,&quot;businessArea&quot;:&quot;MVT&quot;,&quot;decisionTable&quot;:{&quot;rule_execution_set&quot;:[{&quot;criteria&quot;:{&quot;id&quot;:1,&quot;name&quot;:&quot;nationality&quot;,&quot;type&quot;:&quot;LIST&quot;,&quot;values&quot;:[&quot;COUNTRY.AZE&quot;]}}]},&quot;description&quot;:&quot;Ù&#x88;ØµÙ&#x81; Ù&#x88;ØµÙ&#x81;&quot;,&quot;id&quot;:&quot;6e6a6e0a-2997-44ce-85de-6b93160dfa07&quot;,&quot;isVerifiable&quot;:true,&quot;name&quot;:&quot;Ù&#x82;Ø§Ø¹Ø¯Ø© Ø¹Ù&#x85;Ù&#x84;&quot;},{&quot;activated&quot;:false,&quot;applicationDate&quot;:&quot;2021-03-28T15:52:12+02:00&quot;,&quot;businessArea&quot;:&quot;MVT&quot;,&quot;decisionTable&quot;:{&quot;rule_execution_set&quot;:[{&quot;criteria&quot;:{&quot;id&quot;:1,&quot;name&quot;:&quot;nationality&quot;,&quot;type&quot;:&quot;LIST&quot;,&quot;values&quot;:[&quot;COUNTRY.AZE&quot;]}}]},&quot;description&quot;:&quot;Ù&#x82;Ø§Ø¹Ø¯Ø© Ø§Ù&#x84;Ù&#x81;Ù&#x8a;Ø²Ø§ Ù&#x84;Ù&#x84;Ù&#x85;ØµØ±Ù&#x8a;Ù&#x8a;Ù&#x86;&quot;,&quot;id&quot;:&quot;e02b3f0c-c283-471b-a5ca-b82ba62ab3cd&quot;,&quot;isVerifiable&quot;:true,&quot;name&quot;:&quot;Ù&#x82;Ø§Ø¹Ø¯Ø© Ø§Ù&#x84;Ù&#x81;Ù&#x8a;Ø²Ø§ Ù&#x84;Ù&#x84;Ù&#x85;ØµØ±Ù&#x8a;Ù&#x8a;Ù&#x86;&quot;},{&quot;activated&quot;:false,&quot;applicationDate&quot;:&quot;2021-03-28T15:52:12+02:00&quot;,&quot;businessArea&quot;:&quot;MVT&quot;,&quot;decisionTable&quot;:{&quot;rule_execution_set&quot;:[{&quot;criteria&quot;:{&quot;id&quot;:1,&quot;name&quot;:&quot;nationality&quot;,&quot;type&quot;:&quot;LIST&quot;,&quot;values&quot;:[&quot;COUNTRY.AZE&quot;]}}]},&quot;description&quot;:&quot;Ù&#x82;Ø§Ø¹Ø¯Ø© Ø§Ù&#x84;Ø¨ØµÙ&#x85;Ø§Øª Ù&#x84;Ù&#x84;Ù&#x85;ØµØ±Ù&#x8a;Ù&#x8a;Ù&#x86;&quot;,&quot;id&quot;:&quot;718b1eb3-a29e-4c5a-a183-e923e2da2392&quot;,&quot;isVerifiable&quot;:true,&quot;name&quot;:&quot; Ù&#x82;Ø§Ø¹Ø¯Ø© Ø§Ù&#x84;Ø¨ØµÙ&#x85;Ø§Øª Ù&#x84;Ù&#x84;Ù&#x85;ØµØ±Ù&#x8a;Ù&#x8a;Ù&#x86;&quot;},{&quot;activated&quot;:false,&quot;applicationDate&quot;:&quot;2021-03-28T15:52:12+02:00&quot;,&quot;businessArea&quot;:&quot;MVT&quot;,&quot;decisionTable&quot;:{&quot;rule_execution_set&quot;:[{&quot;criteria&quot;:{&quot;id&quot;:12,&quot;name&quot;:&quot;age&quot;,&quot;type&quot;:&quot;RANGE&quot;,&quot;values&quot;:[&quot;25&quot;]}}]},&quot;description&quot;:&quot;Ù&#x85;Ù&#x86;Ø¹ Ø£Ø®Ø° Ø§Ù&#x84;Ø¨ØµÙ&#x85;Ø§Øª Ù&#x84;Ù&#x84;Ø£Ø·Ù&#x81;Ø§Ù&#x84;&quot;,&quot;id&quot;:&quot;4df82cbe-8762-41dd-bd9c-e405adba7aab&quot;,&quot;isVerifiable&quot;:true,&quot;name&quot;:&quot;Ù&#x85;Ù&#x86;Ø¹ Ø£Ø®Ø° Ø§Ù&#x84;Ø¨ØµÙ&#x85;Ø§Øª Ù&#x84;Ù&#x84;Ø£Ø·Ù&#x81;Ø§Ù&#x84;&quot;},{&quot;activated&quot;:false,&quot;applicationDate&quot;:&quot;2021-03-28T15:52:12+02:00&quot;,&quot;businessArea&quot;:&quot;MVT&quot;,&quot;decisionTable&quot;:{&quot;rule_execution_set&quot;:[{&quot;criteria&quot;:{&quot;id&quot;:12,&quot;name&quot;:&quot;age&quot;,&quot;type&quot;:&quot;RANGE&quot;,&quot;values&quot;:[&quot;25&quot;]}}]},&quot;description&quot;:&quot;Ù&#x85;Ù&#x86;Ø¹ Ø£Ø®Ø° Ø§Ù&#x84;ØµÙ&#x88;Ø±Ø© Ù&#x84;Ù&#x84;Ø£Ø·Ù&#x81;Ø§Ù&#x84;&quot;,&quot;id&quot;:&quot;4df82cbe-8762-41dd-bd9c-e405adba7aa1&quot;,&quot;isVerifiable&quot;:true,&quot;name&quot;:&quot;Ù&#x85;Ù&#x86;Ø¹ Ø£Ø®Ø° Ø§Ù&#x84;ØµÙ&#x88;Ø±Ø© Ù&#x84;Ù&#x84;Ø£Ø·Ù&#x81;Ø§Ù&#x84;&quot;},{&quot;activated&quot;:false,&quot;applicationDate&quot;:&quot;2021-03-28T15:52:12+02:00&quot;,&quot;businessArea&quot;:&quot;MVT&quot;,&quot;decisionTable&quot;:{&quot;rule_execution_set&quot;:[{&quot;criteria&quot;:{&quot;id&quot;:17,&quot;name&quot;:&quot;paxType&quot;,&quot;type&quot;:&quot;LIST&quot;,&quot;values&quot;:[&quot;PASSENGER_TYPE.NORMAL_PASSENGER&quot;]}}]},&quot;description&quot;:&quot;Ù&#x84;Ø§ Ù&#x8a;Ø¬Ù&#x88;Ø² Ù&#x84;Ù&#x87; Ø§Ø®Ø° Ø§Ù&#x84;Ø¨ØµÙ&#x85;Ø§Øª&quot;,&quot;id&quot;:&quot;18bd1f93-eedb-499e-b2d7-82c0ee9cbb95&quot;,&quot;isVerifiable&quot;:true,&quot;name&quot;:&quot;Ø±Ø§Ù&#x83;Ø¨ Ù&#x87;Ø§Ù&#x85; &quot;},{&quot;activated&quot;:false,&quot;applicationDate&quot;:&quot;2021-03-28T15:52:12+02:00&quot;,&quot;businessArea&quot;:&quot;MVT&quot;,&quot;decisionTable&quot;:{&quot;rule_execution_set&quot;:[{&quot;criteria&quot;:{&quot;id&quot;:17,&quot;name&quot;:&quot;paxType&quot;,&quot;type&quot;:&quot;LIST&quot;,&quot;values&quot;:[&quot;PASSENGER_TYPE.NORMAL_PASSENGER&quot;]}}]},&quot;description&quot;:&quot;Ø±Ø§Ù&#x83;Ø¨ Ù&#x87;Ø§Ù&#x85; Ù&#x84;Ù&#x8a;Ø³ Ù&#x84;Ù&#x87; Ø§Ø®Ø° Ø§Ù&#x84;ØµÙ&#x88;Ø±Ø©&quot;,&quot;id&quot;:&quot;97cb8faf-436f-4896-82fc-8faa4e305384&quot;,&quot;isVerifiable&quot;:true,&quot;name&quot;:&quot;Ø±Ø§Ù&#x83;Ø¨ Ù&#x87;Ø§Ù&#x85; Ù&#x84;Ù&#x8a;Ø³ Ù&#x84;Ù&#x87; Ø§Ø®Ø° Ø§Ù&#x84;ØµÙ&#x88;Ø±Ø©&quot;},{&quot;activated&quot;:false,&quot;applicationDate&quot;:&quot;2021-03-28T15:52:12+02:00&quot;,&quot;businessArea&quot;:&quot;MVT&quot;,&quot;decisionTable&quot;:{&quot;rule_execution_set&quot;:[{&quot;criteria&quot;:{&quot;id&quot;:17,&quot;name&quot;:&quot;paxType&quot;,&quot;type&quot;:&quot;LIST&quot;,&quot;values&quot;:[&quot;PASSENGER_TYPE.NORMAL_PASSENGER&quot;]}}]},&quot;description&quot;:&quot;Ø·Ø§Ù&#x82;Ù&#x85; Ø§Ù&#x84;Ø·Ù&#x8a;Ø§Ø±Ø© Ù&#x84;Ø§ Ù&#x8a;Ø¬Ù&#x88;Ø² Ø§Ø®Ø° ØµÙ&#x88;Ø±Ø©&quot;,&quot;id&quot;:&quot;a8350e97-7b7e-450a-ae18-a5f3a5ece9ee&quot;,&quot;isVerifiable&quot;:true,&quot;name&quot;:&quot;Ø·Ø§Ù&#x82;Ù&#x85; Ø§Ù&#x84;Ø·Ù&#x8a;Ø§Ø±Ø© Ù&#x84;Ø§ Ù&#x8a;Ø¬Ù&#x88;Ø² Ø§Ø®Ø° ØµÙ&#x88;Ø±Ø©&quot;},{&quot;activated&quot;:false,&quot;applicationDate&quot;:&quot;2021-03-28T15:52:12+02:00&quot;,&quot;businessArea&quot;:&quot;MVT&quot;,&quot;decisionTable&quot;:{&quot;rule_execution_set&quot;:[{&quot;criteria&quot;:{&quot;id&quot;:17,&quot;name&quot;:&quot;paxType&quot;,&quot;type&quot;:&quot;LIST&quot;,&quot;values&quot;:[&quot;PASSENGER_TYPE.NORMAL_PASSENGER&quot;]}}]},&quot;description&quot;:&quot;Ø·Ø§Ù&#x82;Ù&#x85; Ø§Ù&#x84;Ø·Ù&#x8a;Ø§Ø±Ø© Ù&#x84;Ø§ Ù&#x8a;Ø¬Ù&#x88;Ø² Ø§Ø®Ø° Ø§Ù&#x84;Ø¨ØµÙ&#x85;Ø§Øª&quot;,&quot;id&quot;:&quot;078b5f3d-4dd9-47a7-a9e7-1f2556d33589&quot;,&quot;isVerifiable&quot;:true,&quot;name&quot;:&quot;Ø·Ø§Ù&#x82;Ù&#x85; Ø§Ù&#x84;Ø·Ù&#x8a;Ø§Ø±Ø© Ù&#x84;Ø§ Ù&#x8a;Ø¬Ù&#x88;Ø² Ø§Ø®Ø° Ø§Ù&#x84;Ø¨ØµÙ&#x85;Ø§Øª&quot;},{&quot;activated&quot;:false,&quot;applicationDate&quot;:&quot;2021-03-28T15:52:12+02:00&quot;,&quot;businessArea&quot;:&quot;MVT&quot;,&quot;decisionTable&quot;:{&quot;rule_execution_set&quot;:[{&quot;criteria&quot;:{&quot;id&quot;:1,&quot;name&quot;:&quot;nationality&quot;,&quot;type&quot;:&quot;LIST&quot;,&quot;values&quot;:[&quot;COUNTRY.AZE&quot;]}},{&quot;criteria&quot;:{&quot;id&quot;:14,&quot;name&quot;:&quot;sex&quot;,&quot;type&quot;:&quot;LIST&quot;,&quot;values&quot;:[&quot;SEX.F&quot;]}},{&quot;criteria&quot;:{&quot;id&quot;:12,&quot;name&quot;:&quot;age&quot;,&quot;type&quot;:&quot;RANGE&quot;,&quot;values&quot;:[&quot;25&quot;]}}]},&quot;description&quot;:&quot;Ù&#x85;Ù&#x88;Ù&#x82;Ù&#x81; Ø§Ù&#x84;ØªØ¬Ù&#x86;Ù&#x8a;Ø¯&quot;,&quot;id&quot;:&quot;9923df67-8ca0-428f-918b-006f8d170368&quot;,&quot;isVerifiable&quot;:true,&quot;name&quot;:&quot;Ù&#x85;Ù&#x88;Ù&#x82;Ù&#x81; Ø§Ù&#x84;ØªØ¬Ù&#x86;Ù&#x8a;Ø¯&quot;},{&quot;activated&quot;:false,&quot;applicationDate&quot;:&quot;2021-03-30T00:00:00+02:00&quot;,&quot;businessArea&quot;:&quot;MVT&quot;,&quot;decisionTable&quot;:{&quot;rule_execution_set&quot;:[{&quot;criteria&quot;:{&quot;id&quot;:1,&quot;name&quot;:&quot;nationality&quot;,&quot;type&quot;:&quot;LIST&quot;,&quot;values&quot;:[&quot;COUNTRY.AZE&quot;]}}]},&quot;description&quot;:&quot;Ù&#x88;ØµÙ&#x81; Ù&#x88;ØµÙ&#x81;&quot;,&quot;id&quot;:&quot;32301c0d-fe0f-4d19-980c-281b206173b4&quot;,&quot;isVerifiable&quot;:true,&quot;name&quot;:&quot;Ø§Ù&#x84;Ø¬Ù&#x86;Ø³Ù&#x8a;Ø©&quot;}]</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">http</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">businessrules_verify/v1/business_rules-verify/1/bulk-verify</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="list_movements" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="1" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">1</stringProp>
                    <stringProp name="Argument.value">1</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="movementFlightInformationFlightNumber" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">movementFlightInformationFlightNumber</stringProp>
                    <stringProp name="Argument.value">QA</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="flightDate" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">flightDate</stringProp>
                    <stringProp name="Argument.value">2021-08-24T12:00:00Z</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="portName" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">portName</stringProp>
                    <stringProp name="Argument.value">ASSH</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="tdIssuingCountry" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">tdIssuingCountry</stringProp>
                    <stringProp name="Argument.value">COUNTRY.AZE</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="flightType" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">flightType</stringProp>
                    <stringProp name="Argument.value">FLIGHT_TYPE.ARRIVAL</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="tdNumber" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">tdNumber</stringProp>
                    <stringProp name="Argument.value">DJJJJ</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="movementSourceType" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">movementSourceType</stringProp>
                    <stringProp name="Argument.value">PORT</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="ignoreFlightList" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">ignoreFlightList</stringProp>
                    <stringProp name="Argument.value">true</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">http</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">movement_crud/v1/movement/17a1b4c0-a774-8828-8dea-da3f4d21c641/list_movements</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="checkPassport" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="passportNumber" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">passportNumber</stringProp>
                    <stringProp name="Argument.value">DJJJJ</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="nationality" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">nationality</stringProp>
                    <stringProp name="Argument.value">COUNTRY.AZE</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="operatorId" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">operatorId</stringProp>
                    <stringProp name="Argument.value">test5</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">http</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">watchlist_crud/v1/watchlist/blacklist_passport/aefffe38-cf71-13f3-22e1-bd2c51360945/checkPassport</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="findByPassportNo" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="passportNo" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">passportNo</stringProp>
                    <stringProp name="Argument.value">DJJJJ</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="nationality" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">nationality</stringProp>
                    <stringProp name="Argument.value">COUNTRY.AZE</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="includeStopped" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">includeStopped</stringProp>
                    <stringProp name="Argument.value">false</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">http</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">evisa-bcvi-api/v2/evisa/execution/findByPassportNo</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="findByNameAndBirthdate" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="1" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">1</stringProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="birthdate" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">birthdate</stringProp>
                    <stringProp name="Argument.value">19970901</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="includeStopped" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">includeStopped</stringProp>
                    <stringProp name="Argument.value">false</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="latinName" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">latinName</stringProp>
                    <stringProp name="Argument.value">DHHHH FHHHHH</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">http</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">evisa-bcvi-api/v2/evisa/execution/findByNameAndBirthdate</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="list_movements" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="orderType" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">orderType</stringProp>
                    <stringProp name="Argument.value">DESC</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="1" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">1</stringProp>
                    <stringProp name="Argument.value">1</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="notificationRequired" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">notificationRequired</stringProp>
                    <stringProp name="Argument.value">true</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="firstLaneOfficer" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">firstLaneOfficer</stringProp>
                    <stringProp name="Argument.value">test5</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="maxResults" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">maxResults</stringProp>
                    <stringProp name="Argument.value">10</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="orderBy" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">orderBy</stringProp>
                    <stringProp name="Argument.value">creationDate</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="appendLivePortrait" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">appendLivePortrait</stringProp>
                    <stringProp name="Argument.value">true</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="portName" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">portName</stringProp>
                    <stringProp name="Argument.value">ASSH</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="notificationRead" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">notificationRead</stringProp>
                    <stringProp name="Argument.value">false</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="movementSourceType" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">movementSourceType</stringProp>
                    <stringProp name="Argument.value">PORT</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="ignoreFlightList" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">ignoreFlightList</stringProp>
                    <stringProp name="Argument.value">true</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">http</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">movement_crud/v1/movement/32372528-f896-eb63-6163-584dfba25a34/list_movements</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="list_movements" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="1" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">1</stringProp>
                    <stringProp name="Argument.value">1</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="movementFlightInformationFlightNumber" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">movementFlightInformationFlightNumber</stringProp>
                    <stringProp name="Argument.value">QA</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="flightDate" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">flightDate</stringProp>
                    <stringProp name="Argument.value">2021-08-24T12:00:00Z</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="portName" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">portName</stringProp>
                    <stringProp name="Argument.value">ASSH</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="tdIssuingCountry" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">tdIssuingCountry</stringProp>
                    <stringProp name="Argument.value">COUNTRY.AZE</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="flightType" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">flightType</stringProp>
                    <stringProp name="Argument.value">FLIGHT_TYPE.ARRIVAL</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="tdNumber" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">tdNumber</stringProp>
                    <stringProp name="Argument.value">DJJJJ</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="movementSourceType" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">movementSourceType</stringProp>
                    <stringProp name="Argument.value">PORT</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="ignoreFlightList" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">ignoreFlightList</stringProp>
                    <stringProp name="Argument.value">true</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">http</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">movement_crud/v1/movement/17a1b4c0-a774-8828-8dea-da3f4d21c641/list_movements</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="check_wl" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="birthdate" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">birthdate</stringProp>
                    <stringProp name="Argument.value">19970901</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="nationality" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">nationality</stringProp>
                    <stringProp name="Argument.value">COUNTRY.AZE</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="wltype" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">wltype</stringProp>
                    <stringProp name="Argument.value">WL2</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="name" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">name</stringProp>
                    <stringProp name="Argument.value">DHHHH FHHHHH</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="operatorId" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">operatorId</stringProp>
                    <stringProp name="Argument.value">test5</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">http</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">watchlist_crud/v1/watchlist/blacklist_person/aefffe38-cf71-13f3-22e1-bd2c51360945/check_wl</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="business_rules-verify" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">[{&quot;activated&quot;:false,&quot;applicationDate&quot;:&quot;2021-06-01T00:00:00+02:00&quot;,&quot;businessArea&quot;:&quot;MVT&quot;,&quot;decisionTable&quot;:{&quot;rule_execution_set&quot;:[{&quot;criteria&quot;:{&quot;id&quot;:1,&quot;name&quot;:&quot;nationality&quot;,&quot;type&quot;:&quot;LIST&quot;,&quot;values&quot;:[&quot;COUNTRY.AZE&quot;]}}]},&quot;description&quot;:&quot;Ø´Ø§Ø¯Ù&#x8a; ØªØ³Øª&quot;,&quot;id&quot;:&quot;280cd980-205e-4b3a-9364-6c3f37313e7b&quot;,&quot;isVerifiable&quot;:true,&quot;name&quot;:&quot;Ø´Ø§Ø¯Ù&#x8a; Ø´Ø§Ø¯Ù&#x8a;&quot;},{&quot;activated&quot;:false,&quot;applicationDate&quot;:&quot;2021-05-01T00:00:00+02:00&quot;,&quot;businessArea&quot;:&quot;MVT&quot;,&quot;decisionTable&quot;:{&quot;rule_execution_set&quot;:[{&quot;criteria&quot;:{&quot;id&quot;:1,&quot;name&quot;:&quot;nationality&quot;,&quot;type&quot;:&quot;LIST&quot;,&quot;values&quot;:[&quot;COUNTRY.AZE&quot;]}}]},&quot;description&quot;:&quot;Ø¬Ù&#x86;Ø³Ù&#x8a;Ø§Øª Ù&#x8a;Ø¬Ø¨ ØªØ³Ø¬Ù&#x8a;Ù&#x84;Ù&#x87;Ø§&quot;,&quot;id&quot;:&quot;a4d6dcff-c932-4db0-88df-9346cc5e4d4e&quot;,&quot;isVerifiable&quot;:true,&quot;name&quot;:&quot;Ù&#x8a;Ø¬Ø¨ ØªØ³Ø¬Ù&#x8a;Ù&#x84;&quot;},{&quot;activated&quot;:false,&quot;applicationDate&quot;:&quot;2021-04-19T00:00:00+02:00&quot;,&quot;businessArea&quot;:&quot;MVT&quot;,&quot;decisionTable&quot;:{&quot;rule_execution_set&quot;:[{&quot;criteria&quot;:{&quot;id&quot;:45,&quot;name&quot;:&quot;militaryTravelStatusExpirationDate&quot;,&quot;type&quot;:&quot;DATE&quot;}}]},&quot;description&quot;:&quot;Ù&#x88;ØµÙ&#x81; Ø§Ù&#x87;Ù&#x85; Ø§Ù&#x87;Ù&#x85; 12233333333333&quot;,&quot;id&quot;:&quot;42e3bbf9-02fa-43ab-8049-494ae78e4a39&quot;,&quot;isVerifiable&quot;:true,&quot;name&quot;:&quot;Ø§Ù&#x87;Ù&#x85; 1&quot;},{&quot;activated&quot;:false,&quot;applicationDate&quot;:&quot;2021-03-29T00:00:00+02:00&quot;,&quot;businessArea&quot;:&quot;MVT&quot;,&quot;decisionTable&quot;:{&quot;rule_execution_set&quot;:[{&quot;criteria&quot;:{&quot;id&quot;:1,&quot;name&quot;:&quot;nationality&quot;,&quot;type&quot;:&quot;LIST&quot;,&quot;values&quot;:[&quot;COUNTRY.AZE&quot;]}}]},&quot;description&quot;:&quot;Ù&#x88;ØµÙ&#x81; Ù&#x88;ØµÙ&#x81;&quot;,&quot;id&quot;:&quot;6e6a6e0a-2997-44ce-85de-6b93160dfa07&quot;,&quot;isVerifiable&quot;:true,&quot;name&quot;:&quot;Ù&#x82;Ø§Ø¹Ø¯Ø© Ø¹Ù&#x85;Ù&#x84;&quot;},{&quot;activated&quot;:false,&quot;applicationDate&quot;:&quot;2021-03-28T15:52:12+02:00&quot;,&quot;businessArea&quot;:&quot;MVT&quot;,&quot;decisionTable&quot;:{&quot;rule_execution_set&quot;:[{&quot;criteria&quot;:{&quot;id&quot;:1,&quot;name&quot;:&quot;nationality&quot;,&quot;type&quot;:&quot;LIST&quot;,&quot;values&quot;:[&quot;COUNTRY.AZE&quot;]}}]},&quot;description&quot;:&quot;Ù&#x82;Ø§Ø¹Ø¯Ø© Ø§Ù&#x84;Ù&#x81;Ù&#x8a;Ø²Ø§ Ù&#x84;Ù&#x84;Ù&#x85;ØµØ±Ù&#x8a;Ù&#x8a;Ù&#x86;&quot;,&quot;id&quot;:&quot;e02b3f0c-c283-471b-a5ca-b82ba62ab3cd&quot;,&quot;isVerifiable&quot;:true,&quot;name&quot;:&quot;Ù&#x82;Ø§Ø¹Ø¯Ø© Ø§Ù&#x84;Ù&#x81;Ù&#x8a;Ø²Ø§ Ù&#x84;Ù&#x84;Ù&#x85;ØµØ±Ù&#x8a;Ù&#x8a;Ù&#x86;&quot;},{&quot;activated&quot;:false,&quot;applicationDate&quot;:&quot;2021-03-28T15:52:12+02:00&quot;,&quot;businessArea&quot;:&quot;MVT&quot;,&quot;decisionTable&quot;:{&quot;rule_execution_set&quot;:[{&quot;criteria&quot;:{&quot;id&quot;:1,&quot;name&quot;:&quot;nationality&quot;,&quot;type&quot;:&quot;LIST&quot;,&quot;values&quot;:[&quot;COUNTRY.AZE&quot;]}}]},&quot;description&quot;:&quot;Ù&#x82;Ø§Ø¹Ø¯Ø© Ø§Ù&#x84;Ø¨ØµÙ&#x85;Ø§Øª Ù&#x84;Ù&#x84;Ù&#x85;ØµØ±Ù&#x8a;Ù&#x8a;Ù&#x86;&quot;,&quot;id&quot;:&quot;718b1eb3-a29e-4c5a-a183-e923e2da2392&quot;,&quot;isVerifiable&quot;:true,&quot;name&quot;:&quot; Ù&#x82;Ø§Ø¹Ø¯Ø© Ø§Ù&#x84;Ø¨ØµÙ&#x85;Ø§Øª Ù&#x84;Ù&#x84;Ù&#x85;ØµØ±Ù&#x8a;Ù&#x8a;Ù&#x86;&quot;},{&quot;activated&quot;:false,&quot;applicationDate&quot;:&quot;2021-03-28T15:52:12+02:00&quot;,&quot;businessArea&quot;:&quot;MVT&quot;,&quot;decisionTable&quot;:{&quot;rule_execution_set&quot;:[{&quot;criteria&quot;:{&quot;id&quot;:12,&quot;name&quot;:&quot;age&quot;,&quot;type&quot;:&quot;RANGE&quot;,&quot;values&quot;:[&quot;25&quot;]}}]},&quot;description&quot;:&quot;Ù&#x85;Ù&#x86;Ø¹ Ø£Ø®Ø° Ø§Ù&#x84;Ø¨ØµÙ&#x85;Ø§Øª Ù&#x84;Ù&#x84;Ø£Ø·Ù&#x81;Ø§Ù&#x84;&quot;,&quot;id&quot;:&quot;4df82cbe-8762-41dd-bd9c-e405adba7aab&quot;,&quot;isVerifiable&quot;:true,&quot;name&quot;:&quot;Ù&#x85;Ù&#x86;Ø¹ Ø£Ø®Ø° Ø§Ù&#x84;Ø¨ØµÙ&#x85;Ø§Øª Ù&#x84;Ù&#x84;Ø£Ø·Ù&#x81;Ø§Ù&#x84;&quot;},{&quot;activated&quot;:false,&quot;applicationDate&quot;:&quot;2021-03-28T15:52:12+02:00&quot;,&quot;businessArea&quot;:&quot;MVT&quot;,&quot;decisionTable&quot;:{&quot;rule_execution_set&quot;:[{&quot;criteria&quot;:{&quot;id&quot;:12,&quot;name&quot;:&quot;age&quot;,&quot;type&quot;:&quot;RANGE&quot;,&quot;values&quot;:[&quot;25&quot;]}}]},&quot;description&quot;:&quot;Ù&#x85;Ù&#x86;Ø¹ Ø£Ø®Ø° Ø§Ù&#x84;ØµÙ&#x88;Ø±Ø© Ù&#x84;Ù&#x84;Ø£Ø·Ù&#x81;Ø§Ù&#x84;&quot;,&quot;id&quot;:&quot;4df82cbe-8762-41dd-bd9c-e405adba7aa1&quot;,&quot;isVerifiable&quot;:true,&quot;name&quot;:&quot;Ù&#x85;Ù&#x86;Ø¹ Ø£Ø®Ø° Ø§Ù&#x84;ØµÙ&#x88;Ø±Ø© Ù&#x84;Ù&#x84;Ø£Ø·Ù&#x81;Ø§Ù&#x84;&quot;},{&quot;activated&quot;:false,&quot;applicationDate&quot;:&quot;2021-03-28T15:52:12+02:00&quot;,&quot;businessArea&quot;:&quot;MVT&quot;,&quot;decisionTable&quot;:{&quot;rule_execution_set&quot;:[{&quot;criteria&quot;:{&quot;id&quot;:17,&quot;name&quot;:&quot;paxType&quot;,&quot;type&quot;:&quot;LIST&quot;,&quot;values&quot;:[&quot;PASSENGER_TYPE.NORMAL_PASSENGER&quot;]}}]},&quot;description&quot;:&quot;Ù&#x84;Ø§ Ù&#x8a;Ø¬Ù&#x88;Ø² Ù&#x84;Ù&#x87; Ø§Ø®Ø° Ø§Ù&#x84;Ø¨ØµÙ&#x85;Ø§Øª&quot;,&quot;id&quot;:&quot;18bd1f93-eedb-499e-b2d7-82c0ee9cbb95&quot;,&quot;isVerifiable&quot;:true,&quot;name&quot;:&quot;Ø±Ø§Ù&#x83;Ø¨ Ù&#x87;Ø§Ù&#x85; &quot;},{&quot;activated&quot;:false,&quot;applicationDate&quot;:&quot;2021-03-28T15:52:12+02:00&quot;,&quot;businessArea&quot;:&quot;MVT&quot;,&quot;decisionTable&quot;:{&quot;rule_execution_set&quot;:[{&quot;criteria&quot;:{&quot;id&quot;:17,&quot;name&quot;:&quot;paxType&quot;,&quot;type&quot;:&quot;LIST&quot;,&quot;values&quot;:[&quot;PASSENGER_TYPE.NORMAL_PASSENGER&quot;]}}]},&quot;description&quot;:&quot;Ø±Ø§Ù&#x83;Ø¨ Ù&#x87;Ø§Ù&#x85; Ù&#x84;Ù&#x8a;Ø³ Ù&#x84;Ù&#x87; Ø§Ø®Ø° Ø§Ù&#x84;ØµÙ&#x88;Ø±Ø©&quot;,&quot;id&quot;:&quot;97cb8faf-436f-4896-82fc-8faa4e305384&quot;,&quot;isVerifiable&quot;:true,&quot;name&quot;:&quot;Ø±Ø§Ù&#x83;Ø¨ Ù&#x87;Ø§Ù&#x85; Ù&#x84;Ù&#x8a;Ø³ Ù&#x84;Ù&#x87; Ø§Ø®Ø° Ø§Ù&#x84;ØµÙ&#x88;Ø±Ø©&quot;},{&quot;activated&quot;:false,&quot;applicationDate&quot;:&quot;2021-03-28T15:52:12+02:00&quot;,&quot;businessArea&quot;:&quot;MVT&quot;,&quot;decisionTable&quot;:{&quot;rule_execution_set&quot;:[{&quot;criteria&quot;:{&quot;id&quot;:17,&quot;name&quot;:&quot;paxType&quot;,&quot;type&quot;:&quot;LIST&quot;,&quot;values&quot;:[&quot;PASSENGER_TYPE.NORMAL_PASSENGER&quot;]}}]},&quot;description&quot;:&quot;Ø·Ø§Ù&#x82;Ù&#x85; Ø§Ù&#x84;Ø·Ù&#x8a;Ø§Ø±Ø© Ù&#x84;Ø§ Ù&#x8a;Ø¬Ù&#x88;Ø² Ø§Ø®Ø° ØµÙ&#x88;Ø±Ø©&quot;,&quot;id&quot;:&quot;a8350e97-7b7e-450a-ae18-a5f3a5ece9ee&quot;,&quot;isVerifiable&quot;:true,&quot;name&quot;:&quot;Ø·Ø§Ù&#x82;Ù&#x85; Ø§Ù&#x84;Ø·Ù&#x8a;Ø§Ø±Ø© Ù&#x84;Ø§ Ù&#x8a;Ø¬Ù&#x88;Ø² Ø§Ø®Ø° ØµÙ&#x88;Ø±Ø©&quot;},{&quot;activated&quot;:false,&quot;applicationDate&quot;:&quot;2021-03-28T15:52:12+02:00&quot;,&quot;businessArea&quot;:&quot;MVT&quot;,&quot;decisionTable&quot;:{&quot;rule_execution_set&quot;:[{&quot;criteria&quot;:{&quot;id&quot;:17,&quot;name&quot;:&quot;paxType&quot;,&quot;type&quot;:&quot;LIST&quot;,&quot;values&quot;:[&quot;PASSENGER_TYPE.NORMAL_PASSENGER&quot;]}}]},&quot;description&quot;:&quot;Ø·Ø§Ù&#x82;Ù&#x85; Ø§Ù&#x84;Ø·Ù&#x8a;Ø§Ø±Ø© Ù&#x84;Ø§ Ù&#x8a;Ø¬Ù&#x88;Ø² Ø§Ø®Ø° Ø§Ù&#x84;Ø¨ØµÙ&#x85;Ø§Øª&quot;,&quot;id&quot;:&quot;078b5f3d-4dd9-47a7-a9e7-1f2556d33589&quot;,&quot;isVerifiable&quot;:true,&quot;name&quot;:&quot;Ø·Ø§Ù&#x82;Ù&#x85; Ø§Ù&#x84;Ø·Ù&#x8a;Ø§Ø±Ø© Ù&#x84;Ø§ Ù&#x8a;Ø¬Ù&#x88;Ø² Ø§Ø®Ø° Ø§Ù&#x84;Ø¨ØµÙ&#x85;Ø§Øª&quot;},{&quot;activated&quot;:false,&quot;applicationDate&quot;:&quot;2021-03-28T15:52:12+02:00&quot;,&quot;businessArea&quot;:&quot;MVT&quot;,&quot;decisionTable&quot;:{&quot;rule_execution_set&quot;:[{&quot;criteria&quot;:{&quot;id&quot;:1,&quot;name&quot;:&quot;nationality&quot;,&quot;type&quot;:&quot;LIST&quot;,&quot;values&quot;:[&quot;COUNTRY.AZE&quot;]}},{&quot;criteria&quot;:{&quot;id&quot;:14,&quot;name&quot;:&quot;sex&quot;,&quot;type&quot;:&quot;LIST&quot;,&quot;values&quot;:[&quot;SEX.F&quot;]}},{&quot;criteria&quot;:{&quot;id&quot;:12,&quot;name&quot;:&quot;age&quot;,&quot;type&quot;:&quot;RANGE&quot;,&quot;values&quot;:[&quot;25&quot;]}}]},&quot;description&quot;:&quot;Ù&#x85;Ù&#x88;Ù&#x82;Ù&#x81; Ø§Ù&#x84;ØªØ¬Ù&#x86;Ù&#x8a;Ø¯&quot;,&quot;id&quot;:&quot;9923df67-8ca0-428f-918b-006f8d170368&quot;,&quot;isVerifiable&quot;:true,&quot;name&quot;:&quot;Ù&#x85;Ù&#x88;Ù&#x82;Ù&#x81; Ø§Ù&#x84;ØªØ¬Ù&#x86;Ù&#x8a;Ø¯&quot;},{&quot;activated&quot;:false,&quot;applicationDate&quot;:&quot;2021-03-30T00:00:00+02:00&quot;,&quot;businessArea&quot;:&quot;MVT&quot;,&quot;decisionTable&quot;:{&quot;rule_execution_set&quot;:[{&quot;criteria&quot;:{&quot;id&quot;:1,&quot;name&quot;:&quot;nationality&quot;,&quot;type&quot;:&quot;LIST&quot;,&quot;values&quot;:[&quot;COUNTRY.AZE&quot;]}}]},&quot;description&quot;:&quot;Ù&#x88;ØµÙ&#x81; Ù&#x88;ØµÙ&#x81;&quot;,&quot;id&quot;:&quot;32301c0d-fe0f-4d19-980c-281b206173b4&quot;,&quot;isVerifiable&quot;:true,&quot;name&quot;:&quot;Ø§Ù&#x84;Ø¬Ù&#x86;Ø³Ù&#x8a;Ø©&quot;}]</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">http</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">businessrules_verify/v1/business_rules-verify/1/bulk-verify</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="getOpenFlightById" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="flightId" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">flightId</stringProp>
                    <stringProp name="Argument.value">f3f0db29-1ba7-4d85-9b3f-f1717b0fc41a</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">http</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">flightmanagement_crud/v1/flight/FLIGHT/getOpenFlightById</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="add_new_movement" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
  &quot;foreigner&quot;: {&#xd;
    &quot;isUnknownDateOfBirth&quot;: false,&#xd;
    &quot;biometricsCaptureList&quot;: {&#xd;
      &quot;fingerPrintsList&quot;: [],&#xd;
      &quot;fingerPrintExceptionCaseList&quot;: [&#xd;
        {&#xd;
          &quot;fingerPrintImageType&quot;: &quot;RIGHT_FORE&quot;,&#xd;
          &quot;printExceptionType&quot;: &quot;DAMAGED&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;fingerPrintImageType&quot;: &quot;RIGHT_MIDDLE&quot;,&#xd;
          &quot;printExceptionType&quot;: &quot;DAMAGED&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;fingerPrintImageType&quot;: &quot;RIGHT_RING&quot;,&#xd;
          &quot;printExceptionType&quot;: &quot;DAMAGED&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;fingerPrintImageType&quot;: &quot;RIGHT_LITTLE&quot;,&#xd;
          &quot;printExceptionType&quot;: &quot;DAMAGED&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;fingerPrintImageType&quot;: &quot;LEFT_FORE&quot;,&#xd;
          &quot;printExceptionType&quot;: &quot;DAMAGED&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;fingerPrintImageType&quot;: &quot;LEFT_MIDDLE&quot;,&#xd;
          &quot;printExceptionType&quot;: &quot;DAMAGED&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;fingerPrintImageType&quot;: &quot;LEFT_RING&quot;,&#xd;
          &quot;printExceptionType&quot;: &quot;DAMAGED&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;fingerPrintImageType&quot;: &quot;LEFT_LITTLE&quot;,&#xd;
          &quot;printExceptionType&quot;: &quot;DAMAGED&quot;&#xd;
        }&#xd;
      ]&#xd;
    },&#xd;
    &quot;fId&quot;: &quot;&quot;,&#xd;
    &quot;nId&quot;: null,&#xd;
    &quot;createByOperatorId&quot;: &quot;test5&quot;,&#xd;
    &quot;modifyByOperatorId&quot;: &quot;test5&quot;,&#xd;
    &quot;businessAreaOrigin&quot;: &quot;MVT&quot;,&#xd;
    &quot;nationality&quot;: &quot;COUNTRY.AZE&quot;,&#xd;
    &quot;sex&quot;: &quot;SEX.F&quot;,&#xd;
    &quot;dateOfBirth&quot;: &quot;19970901&quot;,&#xd;
    &quot;fullLatinName&quot;: &quot;DHHHH FHHHHH&quot;,&#xd;
    &quot;recordStatus&quot;: &quot;ACTIVATED&quot;&#xd;
  },&#xd;
  &quot;movement&quot;: {&#xd;
    &quot;movementPort&quot;: { &quot;portName&quot;: &quot;ASSH&quot;, &quot;portType&quot;: &quot;AIRPORT&quot; },&#xd;
    &quot;firstLaneMovementCheckResult&quot;: {&#xd;
      &quot;movementCheckResultDate&quot;: &quot;20210906&quot;,&#xd;
      &quot;operatorID&quot;: &quot;test5&quot;,&#xd;
      &quot;stationID&quot;: &quot;ASSH054&quot;,&#xd;
      &quot;portraitStatus&quot;: &quot;SKIPPED&quot;,&#xd;
      &quot;tdExpiryCheckResult&quot;: &quot;VALID&quot;,&#xd;
      &quot;tdOpticalCheckResult&quot;: &quot;NOT_VERIFIED&quot;,&#xd;
      &quot;tdChipCheckResult&quot;: &quot;NOT_VERIFIED&quot;,&#xd;
      &quot;watchListCheckResult&quot;: [&#xd;
        {&#xd;
          &quot;dateOfBirth&quot;: &quot;19970901&quot;,&#xd;
          &quot;fullLatinName&quot;: &quot;${fullLatinName}&quot;,&#xd;
          &quot;travelDocumentNumber&quot;: &quot;DJJJJ&quot;,&#xd;
          &quot;travelDocumentNationality&quot;: &quot;COUNTRY.AZE&quot;,&#xd;
          &quot;personWatchListCheckResult&quot;: &quot;0&quot;,&#xd;
          &quot;travelDocumentWatchListCheckResult&quot;: &quot;0&quot;,&#xd;
          &quot;name&quot;: &quot;DHHHH FHHHHH&quot;&#xd;
        }&#xd;
      ],&#xd;
      &quot;fingerPrintMatchingStatus&quot;: &quot;NOT_VERIFIED&quot;,&#xd;
      &quot;nationalTdCheckResult&quot;: &quot;NOT_VERIFIED&quot;,&#xd;
      &quot;eVisaCheckResult&quot;: &quot;VALID_VISA&quot;,&#xd;
      &quot;militaryTravelCheckResult&quot;: &quot;0&quot;&#xd;
    },&#xd;
    &quot;flightInformation&quot;: {&#xd;
      &quot;movementFlightInformationFlightNumber&quot;: &quot;QA&quot;,&#xd;
      &quot;movementFlightInformationDateOfFlight&quot;: &quot;2021-08-24T12:00:00+02:00&quot;,&#xd;
      &quot;creationPort&quot;: { &quot;portName&quot;: &quot;ASSH&quot;, &quot;portType&quot;: &quot;AIRPORT&quot; },&#xd;
      &quot;movementFlightInformationOperatingCarrierDesignator&quot;: &quot;AIRLINE.93&quot;,&#xd;
      &quot;movementFlightManagementId&quot;: &quot;f3f0db29-1ba7-4d85-9b3f-f1717b0fc41a&quot;,&#xd;
      &quot;internationalPort&quot;: &quot;INTERNATIONAL_PORT.ABU&quot;,&#xd;
      &quot;country&quot;: &quot;COUNTRY.ARE&quot;,&#xd;
      &quot;flightType&quot;: &quot;FLIGHT_TYPE.ARRIVAL&quot;,&#xd;
      &quot;movementFlightInformationDescription&quot;: &quot;Ø§Ø¨Ù&#x88;Ø¸Ø¨Ù&#x89;/Ù&#x85;ØµØ±&quot;&#xd;
    },&#xd;
    &quot;livePortrait&quot;: { &quot;portraitType&quot;: &quot;NOT_ACQUIRED&quot; },&#xd;
    &quot;movementDecision&quot;: { &quot;firstLaneComment&quot;: &quot;this passenger not wanted&quot; },&#xd;
    &quot;movementTerminal&quot;: &quot;TERMINAL.ASSH_ARR_16&quot;,&#xd;
    &quot;hasWeapon&quot;: true,&#xd;
    &quot;movementSource&quot;: &quot;BCVI_SYSTEM_V1&quot;,&#xd;
    &quot;movementGate&quot;: &quot;GATE1_Not_Used&quot;,&#xd;
    &quot;officerID&quot;: &quot;test5&quot;,&#xd;
    &quot;stationID&quot;: &quot;ASSH054&quot;,&#xd;
    &quot;passengerType&quot;: &quot;PASSENGER_TYPE.NORMAL_PASSENGER&quot;,&#xd;
    &quot;fullLatinName&quot;: &quot;DHHHH FHHHHH&quot;,&#xd;
    &quot;secondLaneMovementCheckResult&quot;: null,&#xd;
    &quot;movementType&quot;: &quot;FOREIGNER_ENTRY_FIRST_LANE&quot;,&#xd;
    &quot;movementVisaType&quot;: &quot;GULF_STAMP&quot;,&#xd;
    &quot;movementDateOfBirth&quot;: &quot;19970901&quot;,&#xd;
    &quot;visaToLegacy&quot;: {},&#xd;
    &quot;movementTravelDocument&quot;: {&#xd;
      &quot;travelDocumentImage&quot;: {&#xd;
        &quot;travelDocumentImageAcquisitionSource&quot;: &quot;MANUAL_ACQUISITION&quot;,&#xd;
        &quot;travelDocumentImageBinary_base64&quot;: null&#xd;
      },&#xd;
      &quot;travelDocumentStatus&quot;: &quot;ACTIVATED&quot;,&#xd;
      &quot;travelDocumentPortrait&quot;: null,&#xd;
      &quot;travelDocumentPrimaryIdentifier&quot;: &quot;DHHHH&quot;,&#xd;
      &quot;travelDocumentSecondaryIdentifier&quot;: &quot;FHHHHH&quot;,&#xd;
      &quot;travelDocumentType&quot;: &quot;TD_TYPE.STANDARD_PASSPORT&quot;,&#xd;
      &quot;travelDocumentNumber&quot;: &quot;${travelDocumentNumber}&quot;,&#xd;
      &quot;travelDocumentDateOfBirth&quot;: &quot;19970901&quot;,&#xd;
      &quot;travelDocumentDateOfExpiry&quot;: &quot;20300101&quot;,&#xd;
      &quot;travelDocumentSex&quot;: &quot;SEX.F&quot;,&#xd;
      &quot;travelDocumentPlaceOfBirth&quot;: &quot;COUNTRY.AZE&quot;,&#xd;
      &quot;travelDocumentAuthoritySource&quot;: &quot;COUNTRY.AZE&quot;&#xd;
    },&#xd;
    &quot;movementRegistration&quot;: {&#xd;
      &quot;movementRegistrationStatus&quot;: &quot;NOT_APPLICABLE&quot;,&#xd;
      &quot;officerID&quot;: &quot;test5&quot;,&#xd;
      &quot;stationID&quot;: &quot;ASSH054&quot;&#xd;
    }&#xd;
  }&#xd;
}&#xd;
</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">http</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">movement_crud/v1/movement/aefffe38-cf71-13f3-22e1-bd2c51360945/add_new_movement</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Check if Add Successfully" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-1447651972">foreignerId</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="list_movements" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="orderType" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">orderType</stringProp>
                    <stringProp name="Argument.value">DESC</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="1" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">1</stringProp>
                    <stringProp name="Argument.value">1</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="notificationRequired" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">notificationRequired</stringProp>
                    <stringProp name="Argument.value">true</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="firstLaneOfficer" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">firstLaneOfficer</stringProp>
                    <stringProp name="Argument.value">test5</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="maxResults" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">maxResults</stringProp>
                    <stringProp name="Argument.value">10</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="orderBy" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">orderBy</stringProp>
                    <stringProp name="Argument.value">creationDate</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="appendLivePortrait" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">appendLivePortrait</stringProp>
                    <stringProp name="Argument.value">true</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="portName" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">portName</stringProp>
                    <stringProp name="Argument.value">ASSH</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="notificationRead" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">notificationRead</stringProp>
                    <stringProp name="Argument.value">false</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="movementSourceType" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">movementSourceType</stringProp>
                    <stringProp name="Argument.value">PORT</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="ignoreFlightList" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">ignoreFlightList</stringProp>
                    <stringProp name="Argument.value">true</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">http</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">movement_crud/v1/movement/32372528-f896-eb63-6163-584dfba25a34/list_movements</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
          </hashTree>
        </hashTree>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="Normal UNWANTED" enabled="false">
          <boolProp name="TransactionController.includeTimers">false</boolProp>
          <boolProp name="TransactionController.parent">true</boolProp>
        </TransactionController>
        <hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="Normal Departure" enabled="true">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">true</boolProp>
          </TransactionController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="business_rules-verify" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&quot;businessArea&quot;:&quot;MVT&quot;,&quot;port&quot;:&quot;ASSH&quot;}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">http</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">businessrules_verify/v1/business_rules-verify/22e9089c-11b5-64c1-62d6-b7534a7b88a7/search</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="getOpenFlights" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="creationPort" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">creationPort</stringProp>
                    <stringProp name="Argument.value">ASSH</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="flightType" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">flightType</stringProp>
                    <stringProp name="Argument.value">FLIGHT_TYPE.DEPARTURE</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">http</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">flightmanagement_crud/v1/flight/77611b22-1a2e-cc32-ba2d-d7d6308b7e1a/getOpenFlights</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="get_recent_flights" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="maxResults" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">maxResults</stringProp>
                    <stringProp name="Argument.value">10</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="flightType" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">flightType</stringProp>
                    <stringProp name="Argument.value">FLIGHT_TYPE.DEPARTURE</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="portId" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">portId</stringProp>
                    <stringProp name="Argument.value">ASSH</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">http</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">movement_crud/v1/movement/77611b22-1a2e-cc32-ba2d-d7d6308b7e1a/get_recent_flights</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="getLookuptravelReason" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&quot;flightType&quot;:&quot;ARRIVAL&quot;,&quot;foreigner&quot;:&quot;true&quot;}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">http</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">core_service/v1/lookup/1/getLookup/travelReason</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="interNationalPortETHAIRPORT" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">http</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">core_service/v1/lookup/77611b22-1a2e-cc32-ba2d-d7d6308b7e1a/interNationalPort/ETH/AIRPORT</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="get_flight_metrics_port" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">http</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">movement_crud/v1/movement/77611b22-1a2e-cc32-ba2d-d7d6308b7e1a/get_flight_metrics_port/220f03bd-a4fa-4606-8278-ffd682578627</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="findForeignerOnTravelDocument" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&quot;travelDocumentNumber&quot;:&quot;SDKKFKK&quot;,&quot;travelDocumentAuthoritySource&quot;:&quot;COUNTRY.ERI&quot;}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">http</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">movement_crud/v1/foreigner/contextId/findForeignerOnTravelDocument</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="list_movements" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="orderType" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">orderType</stringProp>
                    <stringProp name="Argument.value">DESC</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="1" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">1</stringProp>
                    <stringProp name="Argument.value">1</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="notificationRequired" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">notificationRequired</stringProp>
                    <stringProp name="Argument.value">true</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="firstLaneOfficer" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">firstLaneOfficer</stringProp>
                    <stringProp name="Argument.value">test5</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="maxResults" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">maxResults</stringProp>
                    <stringProp name="Argument.value">10</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="orderBy" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">orderBy</stringProp>
                    <stringProp name="Argument.value">creationDate</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="appendLivePortrait" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">appendLivePortrait</stringProp>
                    <stringProp name="Argument.value">true</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="portName" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">portName</stringProp>
                    <stringProp name="Argument.value">ASSH</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="notificationRead" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">notificationRead</stringProp>
                    <stringProp name="Argument.value">false</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="movementSourceType" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">movementSourceType</stringProp>
                    <stringProp name="Argument.value">PORT</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="ignoreFlightList" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">ignoreFlightList</stringProp>
                    <stringProp name="Argument.value">true</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">http</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">movement_crud/v1/movement/28b1f268-d12a-51b1-09f3-011ce42725e2/list_movements</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="bulk-verify" enabled="false">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">[{&quot;activated&quot;:false,&quot;applicationDate&quot;:&quot;2021-06-01T00:00:00+02:00&quot;,&quot;businessArea&quot;:&quot;MVT&quot;,&quot;decisionTable&quot;:{&quot;rule_execution_set&quot;:[{&quot;criteria&quot;:{&quot;id&quot;:1,&quot;name&quot;:&quot;nationality&quot;,&quot;type&quot;:&quot;LIST&quot;,&quot;values&quot;:[&quot;COUNTRY.ERI&quot;]}}]},&quot;description&quot;:&quot;Ø´Ø§Ø¯Ù&#x8a; ØªØ³Øª&quot;,&quot;id&quot;:&quot;280cd980-205e-4b3a-9364-6c3f37313e7b&quot;,&quot;isVerifiable&quot;:true,&quot;name&quot;:&quot;Ø´Ø§Ø¯Ù&#x8a; Ø´Ø§Ø¯Ù&#x8a;&quot;},{&quot;activated&quot;:false,&quot;applicationDate&quot;:&quot;2021-05-01T00:00:00+02:00&quot;,&quot;businessArea&quot;:&quot;MVT&quot;,&quot;decisionTable&quot;:{&quot;rule_execution_set&quot;:[{&quot;criteria&quot;:{&quot;id&quot;:1,&quot;name&quot;:&quot;nationality&quot;,&quot;type&quot;:&quot;LIST&quot;,&quot;values&quot;:[&quot;COUNTRY.ERI&quot;]}}]},&quot;description&quot;:&quot;Ø¬Ù&#x86;Ø³Ù&#x8a;Ø§Øª Ù&#x8a;Ø¬Ø¨ ØªØ³Ø¬Ù&#x8a;Ù&#x84;Ù&#x87;Ø§&quot;,&quot;id&quot;:&quot;a4d6dcff-c932-4db0-88df-9346cc5e4d4e&quot;,&quot;isVerifiable&quot;:true,&quot;name&quot;:&quot;Ù&#x8a;Ø¬Ø¨ ØªØ³Ø¬Ù&#x8a;Ù&#x84;&quot;},{&quot;activated&quot;:false,&quot;applicationDate&quot;:&quot;2021-04-19T00:00:00+02:00&quot;,&quot;businessArea&quot;:&quot;MVT&quot;,&quot;decisionTable&quot;:{&quot;rule_execution_set&quot;:[{&quot;criteria&quot;:{&quot;id&quot;:45,&quot;name&quot;:&quot;militaryTravelStatusExpirationDate&quot;,&quot;type&quot;:&quot;DATE&quot;}}]},&quot;description&quot;:&quot;Ù&#x88;ØµÙ&#x81; Ø§Ù&#x87;Ù&#x85; Ø§Ù&#x87;Ù&#x85; 12233333333333&quot;,&quot;id&quot;:&quot;42e3bbf9-02fa-43ab-8049-494ae78e4a39&quot;,&quot;isVerifiable&quot;:true,&quot;name&quot;:&quot;Ø§Ù&#x87;Ù&#x85; 1&quot;},{&quot;activated&quot;:false,&quot;applicationDate&quot;:&quot;2021-03-29T00:00:00+02:00&quot;,&quot;businessArea&quot;:&quot;MVT&quot;,&quot;decisionTable&quot;:{&quot;rule_execution_set&quot;:[{&quot;criteria&quot;:{&quot;id&quot;:1,&quot;name&quot;:&quot;nationality&quot;,&quot;type&quot;:&quot;LIST&quot;,&quot;values&quot;:[&quot;COUNTRY.ERI&quot;]}}]},&quot;description&quot;:&quot;Ù&#x88;ØµÙ&#x81; Ù&#x88;ØµÙ&#x81;&quot;,&quot;id&quot;:&quot;6e6a6e0a-2997-44ce-85de-6b93160dfa07&quot;,&quot;isVerifiable&quot;:true,&quot;name&quot;:&quot;Ù&#x82;Ø§Ø¹Ø¯Ø© Ø¹Ù&#x85;Ù&#x84;&quot;},{&quot;activated&quot;:false,&quot;applicationDate&quot;:&quot;2021-03-28T15:52:12+02:00&quot;,&quot;businessArea&quot;:&quot;MVT&quot;,&quot;decisionTable&quot;:{&quot;rule_execution_set&quot;:[{&quot;criteria&quot;:{&quot;id&quot;:1,&quot;name&quot;:&quot;nationality&quot;,&quot;type&quot;:&quot;LIST&quot;,&quot;values&quot;:[&quot;COUNTRY.ERI&quot;]}}]},&quot;description&quot;:&quot;Ù&#x82;Ø§Ø¹Ø¯Ø© Ø§Ù&#x84;Ù&#x81;Ù&#x8a;Ø²Ø§ Ù&#x84;Ù&#x84;Ù&#x85;ØµØ±Ù&#x8a;Ù&#x8a;Ù&#x86;&quot;,&quot;id&quot;:&quot;e02b3f0c-c283-471b-a5ca-b82ba62ab3cd&quot;,&quot;isVerifiable&quot;:true,&quot;name&quot;:&quot;Ù&#x82;Ø§Ø¹Ø¯Ø© Ø§Ù&#x84;Ù&#x81;Ù&#x8a;Ø²Ø§ Ù&#x84;Ù&#x84;Ù&#x85;ØµØ±Ù&#x8a;Ù&#x8a;Ù&#x86;&quot;},{&quot;activated&quot;:false,&quot;applicationDate&quot;:&quot;2021-03-28T15:52:12+02:00&quot;,&quot;businessArea&quot;:&quot;MVT&quot;,&quot;decisionTable&quot;:{&quot;rule_execution_set&quot;:[{&quot;criteria&quot;:{&quot;id&quot;:1,&quot;name&quot;:&quot;nationality&quot;,&quot;type&quot;:&quot;LIST&quot;,&quot;values&quot;:[&quot;COUNTRY.ERI&quot;]}}]},&quot;description&quot;:&quot;Ù&#x82;Ø§Ø¹Ø¯Ø© Ø§Ù&#x84;Ø¨ØµÙ&#x85;Ø§Øª Ù&#x84;Ù&#x84;Ù&#x85;ØµØ±Ù&#x8a;Ù&#x8a;Ù&#x86;&quot;,&quot;id&quot;:&quot;718b1eb3-a29e-4c5a-a183-e923e2da2392&quot;,&quot;isVerifiable&quot;:true,&quot;name&quot;:&quot; Ù&#x82;Ø§Ø¹Ø¯Ø© Ø§Ù&#x84;Ø¨ØµÙ&#x85;Ø§Øª Ù&#x84;Ù&#x84;Ù&#x85;ØµØ±Ù&#x8a;Ù&#x8a;Ù&#x86;&quot;},{&quot;activated&quot;:false,&quot;applicationDate&quot;:&quot;2021-03-28T15:52:12+02:00&quot;,&quot;businessArea&quot;:&quot;MVT&quot;,&quot;decisionTable&quot;:{&quot;rule_execution_set&quot;:[{&quot;criteria&quot;:{&quot;id&quot;:12,&quot;name&quot;:&quot;age&quot;,&quot;type&quot;:&quot;RANGE&quot;,&quot;values&quot;:[&quot;25&quot;]}}]},&quot;description&quot;:&quot;Ù&#x85;Ù&#x86;Ø¹ Ø£Ø®Ø° Ø§Ù&#x84;Ø¨ØµÙ&#x85;Ø§Øª Ù&#x84;Ù&#x84;Ø£Ø·Ù&#x81;Ø§Ù&#x84;&quot;,&quot;id&quot;:&quot;4df82cbe-8762-41dd-bd9c-e405adba7aab&quot;,&quot;isVerifiable&quot;:true,&quot;name&quot;:&quot;Ù&#x85;Ù&#x86;Ø¹ Ø£Ø®Ø° Ø§Ù&#x84;Ø¨ØµÙ&#x85;Ø§Øª Ù&#x84;Ù&#x84;Ø£Ø·Ù&#x81;Ø§Ù&#x84;&quot;},{&quot;activated&quot;:false,&quot;applicationDate&quot;:&quot;2021-03-28T15:52:12+02:00&quot;,&quot;businessArea&quot;:&quot;MVT&quot;,&quot;decisionTable&quot;:{&quot;rule_execution_set&quot;:[{&quot;criteria&quot;:{&quot;id&quot;:12,&quot;name&quot;:&quot;age&quot;,&quot;type&quot;:&quot;RANGE&quot;,&quot;values&quot;:[&quot;25&quot;]}}]},&quot;description&quot;:&quot;Ù&#x85;Ù&#x86;Ø¹ Ø£Ø®Ø° Ø§Ù&#x84;ØµÙ&#x88;Ø±Ø© Ù&#x84;Ù&#x84;Ø£Ø·Ù&#x81;Ø§Ù&#x84;&quot;,&quot;id&quot;:&quot;4df82cbe-8762-41dd-bd9c-e405adba7aa1&quot;,&quot;isVerifiable&quot;:true,&quot;name&quot;:&quot;Ù&#x85;Ù&#x86;Ø¹ Ø£Ø®Ø° Ø§Ù&#x84;ØµÙ&#x88;Ø±Ø© Ù&#x84;Ù&#x84;Ø£Ø·Ù&#x81;Ø§Ù&#x84;&quot;},{&quot;activated&quot;:false,&quot;applicationDate&quot;:&quot;2021-03-28T15:52:12+02:00&quot;,&quot;businessArea&quot;:&quot;MVT&quot;,&quot;decisionTable&quot;:{&quot;rule_execution_set&quot;:[{&quot;criteria&quot;:{&quot;id&quot;:17,&quot;name&quot;:&quot;paxType&quot;,&quot;type&quot;:&quot;LIST&quot;,&quot;values&quot;:[&quot;PASSENGER_TYPE.NORMAL_PASSENGER&quot;]}}]},&quot;description&quot;:&quot;Ù&#x84;Ø§ Ù&#x8a;Ø¬Ù&#x88;Ø² Ù&#x84;Ù&#x87; Ø§Ø®Ø° Ø§Ù&#x84;Ø¨ØµÙ&#x85;Ø§Øª&quot;,&quot;id&quot;:&quot;18bd1f93-eedb-499e-b2d7-82c0ee9cbb95&quot;,&quot;isVerifiable&quot;:true,&quot;name&quot;:&quot;Ø±Ø§Ù&#x83;Ø¨ Ù&#x87;Ø§Ù&#x85; &quot;},{&quot;activated&quot;:false,&quot;applicationDate&quot;:&quot;2021-03-28T15:52:12+02:00&quot;,&quot;businessArea&quot;:&quot;MVT&quot;,&quot;decisionTable&quot;:{&quot;rule_execution_set&quot;:[{&quot;criteria&quot;:{&quot;id&quot;:17,&quot;name&quot;:&quot;paxType&quot;,&quot;type&quot;:&quot;LIST&quot;,&quot;values&quot;:[&quot;PASSENGER_TYPE.NORMAL_PASSENGER&quot;]}}]},&quot;description&quot;:&quot;Ø±Ø§Ù&#x83;Ø¨ Ù&#x87;Ø§Ù&#x85; Ù&#x84;Ù&#x8a;Ø³ Ù&#x84;Ù&#x87; Ø§Ø®Ø° Ø§Ù&#x84;ØµÙ&#x88;Ø±Ø©&quot;,&quot;id&quot;:&quot;97cb8faf-436f-4896-82fc-8faa4e305384&quot;,&quot;isVerifiable&quot;:true,&quot;name&quot;:&quot;Ø±Ø§Ù&#x83;Ø¨ Ù&#x87;Ø§Ù&#x85; Ù&#x84;Ù&#x8a;Ø³ Ù&#x84;Ù&#x87; Ø§Ø®Ø° Ø§Ù&#x84;ØµÙ&#x88;Ø±Ø©&quot;},{&quot;activated&quot;:false,&quot;applicationDate&quot;:&quot;2021-03-28T15:52:12+02:00&quot;,&quot;businessArea&quot;:&quot;MVT&quot;,&quot;decisionTable&quot;:{&quot;rule_execution_set&quot;:[{&quot;criteria&quot;:{&quot;id&quot;:17,&quot;name&quot;:&quot;paxType&quot;,&quot;type&quot;:&quot;LIST&quot;,&quot;values&quot;:[&quot;PASSENGER_TYPE.NORMAL_PASSENGER&quot;]}}]},&quot;description&quot;:&quot;Ø·Ø§Ù&#x82;Ù&#x85; Ø§Ù&#x84;Ø·Ù&#x8a;Ø§Ø±Ø© Ù&#x84;Ø§ Ù&#x8a;Ø¬Ù&#x88;Ø² Ø§Ø®Ø° ØµÙ&#x88;Ø±Ø©&quot;,&quot;id&quot;:&quot;a8350e97-7b7e-450a-ae18-a5f3a5ece9ee&quot;,&quot;isVerifiable&quot;:true,&quot;name&quot;:&quot;Ø·Ø§Ù&#x82;Ù&#x85; Ø§Ù&#x84;Ø·Ù&#x8a;Ø§Ø±Ø© Ù&#x84;Ø§ Ù&#x8a;Ø¬Ù&#x88;Ø² Ø§Ø®Ø° ØµÙ&#x88;Ø±Ø©&quot;},{&quot;activated&quot;:false,&quot;applicationDate&quot;:&quot;2021-03-28T15:52:12+02:00&quot;,&quot;businessArea&quot;:&quot;MVT&quot;,&quot;decisionTable&quot;:{&quot;rule_execution_set&quot;:[{&quot;criteria&quot;:{&quot;id&quot;:17,&quot;name&quot;:&quot;paxType&quot;,&quot;type&quot;:&quot;LIST&quot;,&quot;values&quot;:[&quot;PASSENGER_TYPE.NORMAL_PASSENGER&quot;]}}]},&quot;description&quot;:&quot;Ø·Ø§Ù&#x82;Ù&#x85; Ø§Ù&#x84;Ø·Ù&#x8a;Ø§Ø±Ø© Ù&#x84;Ø§ Ù&#x8a;Ø¬Ù&#x88;Ø² Ø§Ø®Ø° Ø§Ù&#x84;Ø¨ØµÙ&#x85;Ø§Øª&quot;,&quot;id&quot;:&quot;078b5f3d-4dd9-47a7-a9e7-1f2556d33589&quot;,&quot;isVerifiable&quot;:true,&quot;name&quot;:&quot;Ø·Ø§Ù&#x82;Ù&#x85; Ø§Ù&#x84;Ø·Ù&#x8a;Ø§Ø±Ø© Ù&#x84;Ø§ Ù&#x8a;Ø¬Ù&#x88;Ø² Ø§Ø®Ø° Ø§Ù&#x84;Ø¨ØµÙ&#x85;Ø§Øª&quot;},{&quot;activated&quot;:false,&quot;applicationDate&quot;:&quot;2021-03-28T15:52:12+02:00&quot;,&quot;businessArea&quot;:&quot;MVT&quot;,&quot;decisionTable&quot;:{&quot;rule_execution_set&quot;:[{&quot;criteria&quot;:{&quot;id&quot;:1,&quot;name&quot;:&quot;nationality&quot;,&quot;type&quot;:&quot;LIST&quot;,&quot;values&quot;:[&quot;COUNTRY.ERI&quot;]}},{&quot;criteria&quot;:{&quot;id&quot;:14,&quot;name&quot;:&quot;sex&quot;,&quot;type&quot;:&quot;LIST&quot;,&quot;values&quot;:[&quot;SEX.M&quot;]}},{&quot;criteria&quot;:{&quot;id&quot;:12,&quot;name&quot;:&quot;age&quot;,&quot;type&quot;:&quot;RANGE&quot;,&quot;values&quot;:[&quot;25&quot;]}}]},&quot;description&quot;:&quot;Ù&#x85;Ù&#x88;Ù&#x82;Ù&#x81; Ø§Ù&#x84;ØªØ¬Ù&#x86;Ù&#x8a;Ø¯&quot;,&quot;id&quot;:&quot;9923df67-8ca0-428f-918b-006f8d170368&quot;,&quot;isVerifiable&quot;:true,&quot;name&quot;:&quot;Ù&#x85;Ù&#x88;Ù&#x82;Ù&#x81; Ø§Ù&#x84;ØªØ¬Ù&#x86;Ù&#x8a;Ø¯&quot;},{&quot;activated&quot;:false,&quot;applicationDate&quot;:&quot;2021-03-30T00:00:00+02:00&quot;,&quot;businessArea&quot;:&quot;MVT&quot;,&quot;decisionTable&quot;:{&quot;rule_execution_set&quot;:[{&quot;criteria&quot;:{&quot;id&quot;:1,&quot;name&quot;:&quot;nationality&quot;,&quot;type&quot;:&quot;LIST&quot;,&quot;values&quot;:[&quot;COUNTRY.ERI&quot;]}}]},&quot;description&quot;:&quot;Ù&#x88;ØµÙ&#x81; Ù&#x88;ØµÙ&#x81;&quot;,&quot;id&quot;:&quot;32301c0d-fe0f-4d19-980c-281b206173b4&quot;,&quot;isVerifiable&quot;:true,&quot;name&quot;:&quot;Ø§Ù&#x84;Ø¬Ù&#x86;Ø³Ù&#x8a;Ø©&quot;}]</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">http</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">businessrules_verify/v1/business_rules-verify/1/bulk-verify</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="activePermits" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&quot;nationality&quot;:&quot;COUNTRY.ERI&quot;,&quot;sex&quot;:&quot;SEX.M&quot;,&quot;dateOfBirth&quot;:&quot;19970901&quot;,&quot;destination&quot;:&quot;COUNTRY.ETH&quot;,&quot;travelReason&quot;:&quot;&quot;,&quot;passportNo&quot;:&quot;KLDKDK&quot;,&quot;nid&quot;:null}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">http</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">movement_crud/v1/permit/ACTIVE_PERMITS/activePermits</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="list_movements" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="1" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">1</stringProp>
                    <stringProp name="Argument.value">1</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="movementFlightInformationFlightNumber" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">movementFlightInformationFlightNumber</stringProp>
                    <stringProp name="Argument.value">QC1</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="flightDate" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">flightDate</stringProp>
                    <stringProp name="Argument.value">2021-09-06T12:00:00Z</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="portName" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">portName</stringProp>
                    <stringProp name="Argument.value">ASSH</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="tdIssuingCountry" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">tdIssuingCountry</stringProp>
                    <stringProp name="Argument.value">COUNTRY.ETH</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="flightType" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">flightType</stringProp>
                    <stringProp name="Argument.value">FLIGHT_TYPE.DEPARTURE</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="tdNumber" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">tdNumber</stringProp>
                    <stringProp name="Argument.value">KLDKDK</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="movementSourceType" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">movementSourceType</stringProp>
                    <stringProp name="Argument.value">PORT</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="ignoreFlightList" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">ignoreFlightList</stringProp>
                    <stringProp name="Argument.value">true</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">http</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">movement_crud/v1/movement/22e9089c-11b5-64c1-62d6-b7534a7b88a7/list_movements</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="checkPassport" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="passportNumber" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">passportNumber</stringProp>
                    <stringProp name="Argument.value">KLDKDK</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="nationality" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">nationality</stringProp>
                    <stringProp name="Argument.value">COUNTRY.ERI</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="operatorId" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">operatorId</stringProp>
                    <stringProp name="Argument.value">test5</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">http</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">watchlist_crud/v1/watchlist/blacklist_passport/7a3427f1-f3c5-a818-eb7d-c273de563b89/checkPassport</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="identify" enabled="true">
              <elementProp name="HTTPsampler.Files" elementType="HTTPFileArgs">
                <collectionProp name="HTTPFileArgs.files">
                  <elementProp name="C:\Performance\BCVI-Performance\Border Control\MVT Port\19700101M3006306.nist" elementType="HTTPFileArg">
                    <stringProp name="File.path">C:\Performance\BCVI-Performance\Border Control\MVT Port\19700101M3006306.nist</stringProp>
                    <stringProp name="File.paramname">fingerprint</stringProp>
                    <stringProp name="File.mimetype">application/nist</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&quot;machineReadableZone&quot;:{&quot;travelDocumentNumber&quot;:&quot;KLDKDK&quot;,&quot;travelDocumentAuthoritySource&quot;:&quot;COUNTRY.ETH&quot;,&quot;dateOfBirth&quot;:&quot;19970901&quot;,&quot;fullLatinName&quot;:&quot;AHMED AHMED&quot;},&quot;identifyFingerprints&quot;:[&quot;${fingerprint}&quot;],&quot;fId&quot;:&quot;&quot;,&quot;passengerType&quot;:&quot;PASSENGER_TYPE.NORMAL_PASSENGER&quot;}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">http</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">movement_crud/v1/foreigner/7a3427f1-f3c5-a818-eb7d-c273de563b89/identify</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">true</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="check_wl" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="birthdate" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">birthdate</stringProp>
                    <stringProp name="Argument.value">19970901</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="nationality" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">nationality</stringProp>
                    <stringProp name="Argument.value">COUNTRY.ERI</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="wltype" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">wltype</stringProp>
                    <stringProp name="Argument.value">WL1</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="name" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">name</stringProp>
                    <stringProp name="Argument.value">AHMED AHMED</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="operatorId" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">operatorId</stringProp>
                    <stringProp name="Argument.value">test5</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">http</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">watchlist_crud/v1/watchlist/blacklist_person/7a3427f1-f3c5-a818-eb7d-c273de563b89/check_wl</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="getOpenFlightById" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="flightId" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">flightId</stringProp>
                    <stringProp name="Argument.value">220f03bd-a4fa-4606-8278-ffd682578627</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">http</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">flightmanagement_crud/v1/flight/FLIGHT/getOpenFlightById</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="add_new_movement" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
  &quot;foreigner&quot;: {&#xd;
    &quot;isUnknownDateOfBirth&quot;: false,&#xd;
    &quot;fullArabicName&quot;: &quot;Ø§Ø­Ù&#x85;Ø¯ Ø§Ø­Ù&#x85;Ø¯&quot;,&#xd;
    &quot;biometricsCaptureList&quot;: {&#xd;
      &quot;fingerPrintsList&quot;: [],&#xd;
      &quot;fingerPrintExceptionCaseList&quot;: [&#xd;
        {&#xd;
          &quot;fingerPrintImageType&quot;: &quot;RIGHT_FORE&quot;,&#xd;
          &quot;printExceptionType&quot;: &quot;DAMAGED&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;fingerPrintImageType&quot;: &quot;RIGHT_MIDDLE&quot;,&#xd;
          &quot;printExceptionType&quot;: &quot;DAMAGED&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;fingerPrintImageType&quot;: &quot;RIGHT_RING&quot;,&#xd;
          &quot;printExceptionType&quot;: &quot;DAMAGED&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;fingerPrintImageType&quot;: &quot;RIGHT_LITTLE&quot;,&#xd;
          &quot;printExceptionType&quot;: &quot;DAMAGED&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;fingerPrintImageType&quot;: &quot;LEFT_FORE&quot;,&#xd;
          &quot;printExceptionType&quot;: &quot;DAMAGED&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;fingerPrintImageType&quot;: &quot;LEFT_MIDDLE&quot;,&#xd;
          &quot;printExceptionType&quot;: &quot;DAMAGED&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;fingerPrintImageType&quot;: &quot;LEFT_RING&quot;,&#xd;
          &quot;printExceptionType&quot;: &quot;DAMAGED&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;fingerPrintImageType&quot;: &quot;LEFT_LITTLE&quot;,&#xd;
          &quot;printExceptionType&quot;: &quot;DAMAGED&quot;&#xd;
        }&#xd;
      ]&#xd;
    },&#xd;
    &quot;fId&quot;: &quot;&quot;,&#xd;
    &quot;nId&quot;: null,&#xd;
    &quot;createByOperatorId&quot;: &quot;test5&quot;,&#xd;
    &quot;modifyByOperatorId&quot;: &quot;test5&quot;,&#xd;
    &quot;businessAreaOrigin&quot;: &quot;MVT&quot;,&#xd;
    &quot;nationality&quot;: &quot;COUNTRY.ERI&quot;,&#xd;
    &quot;sex&quot;: &quot;SEX.M&quot;,&#xd;
    &quot;dateOfBirth&quot;: &quot;19970901&quot;,&#xd;
    &quot;fullLatinName&quot;: &quot;${fullLatinName}&quot;,&#xd;
    &quot;recordStatus&quot;: &quot;ACTIVATED&quot;&#xd;
  },&#xd;
  &quot;movement&quot;: {&#xd;
    &quot;movementPort&quot;: { &quot;portName&quot;: &quot;ASSH&quot;, &quot;portType&quot;: &quot;AIRPORT&quot; },&#xd;
    &quot;firstLaneMovementCheckResult&quot;: {&#xd;
      &quot;movementCheckResultDate&quot;: &quot;20210912&quot;,&#xd;
      &quot;operatorID&quot;: &quot;test5&quot;,&#xd;
      &quot;stationID&quot;: &quot;ASSH054&quot;,&#xd;
      &quot;portraitStatus&quot;: &quot;SKIPPED&quot;,&#xd;
      &quot;tdExpiryCheckResult&quot;: &quot;VALID&quot;,&#xd;
      &quot;tdOpticalCheckResult&quot;: &quot;NOT_VERIFIED&quot;,&#xd;
      &quot;tdChipCheckResult&quot;: &quot;NOT_VERIFIED&quot;,&#xd;
      &quot;watchListCheckResult&quot;: [&#xd;
        {&#xd;
          &quot;dateOfBirth&quot;: &quot;19970901&quot;,&#xd;
          &quot;fullLatinName&quot;: &quot;${fullLatinName}&quot;,&#xd;
          &quot;travelDocumentNumber&quot;: &quot;${td_no}&quot;,&#xd;
          &quot;travelDocumentNationality&quot;: &quot;COUNTRY.ERI&quot;,&#xd;
          &quot;personWatchListCheckResult&quot;: &quot;0&quot;,&#xd;
          &quot;travelDocumentWatchListCheckResult&quot;: &quot;0&quot;,&#xd;
          &quot;name&quot;: &quot;${fullLatinName}&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;dateOfBirth&quot;: &quot;19970901&quot;,&#xd;
          &quot;fullLatinName&quot;: &quot;Ø§Ø­Ù&#x85;Ø¯ Ø§Ø­Ù&#x85;Ø¯&quot;,&#xd;
          &quot;travelDocumentNumber&quot;: &quot;${td_no}&quot;,&#xd;
          &quot;travelDocumentNationality&quot;: &quot;COUNTRY.ERI&quot;,&#xd;
          &quot;personWatchListCheckResult&quot;: &quot;0&quot;,&#xd;
          &quot;travelDocumentWatchListCheckResult&quot;: &quot;0&quot;,&#xd;
          &quot;name&quot;: &quot;Ø§Ø­Ù&#x85;Ø¯ Ø§Ø­Ù&#x85;Ø¯&quot;&#xd;
        }&#xd;
      ],&#xd;
      &quot;fingerPrintMatchingStatus&quot;: &quot;NOT_VERIFIED&quot;,&#xd;
      &quot;nationalTdCheckResult&quot;: &quot;NOT_VERIFIED&quot;,&#xd;
      &quot;eVisaCheckResult&quot;: &quot;VALID_VISA&quot;,&#xd;
      &quot;militaryTravelCheckResult&quot;: &quot;0&quot;&#xd;
    },&#xd;
    &quot;flightInformation&quot;: {&#xd;
      &quot;movementFlightInformationFlightNumber&quot;: &quot;QC1&quot;,&#xd;
      &quot;movementFlightInformationDateOfFlight&quot;: &quot;2021-09-06T12:00:00+02:00&quot;,&#xd;
      &quot;creationPort&quot;: { &quot;portName&quot;: &quot;ASSH&quot;, &quot;portType&quot;: &quot;AIRPORT&quot; },&#xd;
      &quot;movementFlightInformationOperatingCarrierDesignator&quot;: &quot;AIRLINE.93&quot;,&#xd;
      &quot;movementFlightManagementId&quot;: &quot;220f03bd-a4fa-4606-8278-ffd682578627&quot;,&#xd;
      &quot;internationalPort&quot;: &quot;INTERNATIONAL_PORT.QQQQQ&quot;,&#xd;
      &quot;country&quot;: &quot;COUNTRY.ETH&quot;,&#xd;
      &quot;flightType&quot;: &quot;FLIGHT_TYPE.DEPARTURE&quot;,&#xd;
      &quot;movementFlightInformationDescription&quot;: &quot;Ù&#x85;ØµØ±/Ø§Ø«Ù&#x8a;Ù&#x88;Ø¨Ù&#x89;&quot;&#xd;
    },&#xd;
    &quot;livePortrait&quot;: { &quot;portraitType&quot;: &quot;NOT_ACQUIRED&quot; },&#xd;
    &quot;movementDecision&quot;: {},&#xd;
    &quot;movementTerminal&quot;: &quot;TERMINAL.ASSH_DEP_21&quot;,&#xd;
    &quot;movementSource&quot;: &quot;BCVI_SYSTEM_V1&quot;,&#xd;
    &quot;movementGate&quot;: &quot;GATE1_Not_Used&quot;,&#xd;
    &quot;officerID&quot;: &quot;test5&quot;,&#xd;
    &quot;stationID&quot;: &quot;ASSH054&quot;,&#xd;
    &quot;passengerType&quot;: &quot;PASSENGER_TYPE.NORMAL_PASSENGER&quot;,&#xd;
    &quot;fullLatinName&quot;: &quot;${fullLatinName}&quot;,&#xd;
    &quot;secondLaneMovementCheckResult&quot;: null,&#xd;
    &quot;movementType&quot;: &quot;FOREIGNER_EXIT_FIRST_LANE&quot;,&#xd;
    &quot;fullArabicName&quot;: &quot;Ø§Ø­Ù&#x85;Ø¯ Ø§Ø­Ù&#x85;Ø¯&quot;,&#xd;
    &quot;movementVisaType&quot;: &quot;GULF_STAMP&quot;,&#xd;
    &quot;movementDateOfBirth&quot;: &quot;19970901&quot;,&#xd;
    &quot;visaToLegacy&quot;: {},&#xd;
    &quot;movementTravelDocument&quot;: {&#xd;
      &quot;travelDocumentImage&quot;: {&#xd;
        &quot;travelDocumentImageAcquisitionSource&quot;: &quot;MANUAL_ACQUISITION&quot;,&#xd;
        &quot;travelDocumentImageBinary_base64&quot;: null&#xd;
      },&#xd;
      &quot;travelDocumentStatus&quot;: &quot;ACTIVATED&quot;,&#xd;
      &quot;travelDocumentPortrait&quot;: null,&#xd;
      &quot;travelDocumentPrimaryIdentifier&quot;: &quot;AHMED&quot;,&#xd;
      &quot;travelDocumentSecondaryIdentifier&quot;: &quot;AHMED&quot;,&#xd;
      &quot;travelDocumentType&quot;: &quot;TD_TYPE.STANDARD_PASSPORT&quot;,&#xd;
      &quot;travelDocumentNumber&quot;: &quot;${td_no}&quot;,&#xd;
      &quot;travelDocumentDateOfBirth&quot;: &quot;19970901&quot;,&#xd;
      &quot;travelDocumentDateOfExpiry&quot;: &quot;20300101&quot;,&#xd;
      &quot;travelDocumentSex&quot;: &quot;SEX.M&quot;,&#xd;
      &quot;travelDocumentPlaceOfBirth&quot;: &quot;COUNTRY.ERI&quot;,&#xd;
      &quot;travelDocumentAuthoritySource&quot;: &quot;COUNTRY.ETH&quot;&#xd;
    }&#xd;
  }&#xd;
}&#xd;
</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">http</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">movement_crud/v1/movement/7a3427f1-f3c5-a818-eb7d-c273de563b89/add_new_movement</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Check if Add Successfully" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-1447651972">foreignerId</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
              </ResponseAssertion>
              <hashTree/>
              <RandomVariableConfig guiclass="TestBeanGUI" testclass="RandomVariableConfig" testname="Random Variable" enabled="true">
                <stringProp name="maximumValue">10000000000</stringProp>
                <stringProp name="minimumValue">1</stringProp>
                <stringProp name="outputFormat"></stringProp>
                <boolProp name="perThread">false</boolProp>
                <stringProp name="randomSeed"></stringProp>
                <stringProp name="variableName">td_no</stringProp>
              </RandomVariableConfig>
              <hashTree/>
            </hashTree>
          </hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="Normal Arriving" enabled="false">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">true</boolProp>
          </TransactionController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="business_rules-verify" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&quot;businessArea&quot;:&quot;MVT&quot;,&quot;port&quot;:&quot;ASSH&quot;}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">http</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">businessrules_verify/v1/business_rules-verify/de1eab44-a5a4-c4eb-afe1-18f87ff68b64/search</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="getOpenFlights" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="creationPort" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">creationPort</stringProp>
                    <stringProp name="Argument.value">ASSH</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="flightType" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">flightType</stringProp>
                    <stringProp name="Argument.value">FLIGHT_TYPE.ARRIVAL</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">http</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">flightmanagement_crud/v1/flight/e0bc8af0-2f99-de03-70ae-e388d25b3556/getOpenFlights</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="get_recent_flights" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="maxResults" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">maxResults</stringProp>
                    <stringProp name="Argument.value">10</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="flightType" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">flightType</stringProp>
                    <stringProp name="Argument.value">FLIGHT_TYPE.ARRIVAL</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="portId" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">portId</stringProp>
                    <stringProp name="Argument.value">ASSH</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">http</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">movement_crud/v1/movement/e0bc8af0-2f99-de03-70ae-e388d25b3556/get_recent_flights</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="interNationalPortAREAIRPORT" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">http</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">core_service/v1/lookup/e0bc8af0-2f99-de03-70ae-e388d25b3556/interNationalPort/ARE/AIRPORT</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="get_flight_metrics_port" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">http</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">movement_crud/v1/movement/e0bc8af0-2f99-de03-70ae-e388d25b3556/get_flight_metrics_port/6f760789-62d2-4de0-95a1-67ec070781f7</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="list_movements" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="orderType" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">orderType</stringProp>
                    <stringProp name="Argument.value">DESC</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="1" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">1</stringProp>
                    <stringProp name="Argument.value">1</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="notificationRequired" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">notificationRequired</stringProp>
                    <stringProp name="Argument.value">true</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="firstLaneOfficer" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">firstLaneOfficer</stringProp>
                    <stringProp name="Argument.value">test5</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="maxResults" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">maxResults</stringProp>
                    <stringProp name="Argument.value">10</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="orderBy" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">orderBy</stringProp>
                    <stringProp name="Argument.value">creationDate</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="appendLivePortrait" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">appendLivePortrait</stringProp>
                    <stringProp name="Argument.value">true</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="portName" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">portName</stringProp>
                    <stringProp name="Argument.value">ASSH</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="notificationRead" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">notificationRead</stringProp>
                    <stringProp name="Argument.value">false</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="movementSourceType" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">movementSourceType</stringProp>
                    <stringProp name="Argument.value">PORT</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="ignoreFlightList" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">ignoreFlightList</stringProp>
                    <stringProp name="Argument.value">true</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">http</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">movement_crud/v1/movement/6b002426-a682-39bc-79c4-ae6a93b843bb/list_movements</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="getCountryByCode" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="countryCode" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">countryCode</stringProp>
                    <stringProp name="Argument.value">COUNTRY.ERI</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">http</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">evisa-bcvi-api/v2/reference-data/countryByCode</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="list_movements" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="1" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">1</stringProp>
                    <stringProp name="Argument.value">1</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="movementFlightInformationFlightNumber" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">movementFlightInformationFlightNumber</stringProp>
                    <stringProp name="Argument.value">FLIGHT3</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="flightDate" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">flightDate</stringProp>
                    <stringProp name="Argument.value">2021-08-24T12:00:00Z</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="portName" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">portName</stringProp>
                    <stringProp name="Argument.value">ASSH</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="tdIssuingCountry" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">tdIssuingCountry</stringProp>
                    <stringProp name="Argument.value">COUNTRY.ERI</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="flightType" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">flightType</stringProp>
                    <stringProp name="Argument.value">FLIGHT_TYPE.ARRIVAL</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="tdNumber" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">tdNumber</stringProp>
                    <stringProp name="Argument.value">SDKKFKK</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="movementSourceType" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">movementSourceType</stringProp>
                    <stringProp name="Argument.value">PORT</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="ignoreFlightList" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">ignoreFlightList</stringProp>
                    <stringProp name="Argument.value">true</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">http</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">movement_crud/v1/movement/de1eab44-a5a4-c4eb-afe1-18f87ff68b64/list_movements</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="checkPassport" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="passportNumber" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">passportNumber</stringProp>
                    <stringProp name="Argument.value">SDKKFKK</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="nationality" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">nationality</stringProp>
                    <stringProp name="Argument.value">COUNTRY.ERI</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="operatorId" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">operatorId</stringProp>
                    <stringProp name="Argument.value">test5</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">http</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">watchlist_crud/v1/watchlist/blacklist_passport/8d2d2bae-1b5c-479b-fad7-d15a2c784fbf/checkPassport</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="findByPassportNo" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="passportNo" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">passportNo</stringProp>
                    <stringProp name="Argument.value">SDKKFKK</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="nationality" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">nationality</stringProp>
                    <stringProp name="Argument.value">COUNTRY.ERI</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="includeStopped" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">includeStopped</stringProp>
                    <stringProp name="Argument.value">false</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">http</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">evisa-bcvi-api/v2/evisa/execution/findByPassportNo</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="findByNameAndBirthdate" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="1" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">1</stringProp>
                    <stringProp name="Argument.value"></stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="arabicName" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">arabicName</stringProp>
                    <stringProp name="Argument.value">خالد خالد</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="birthdate" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">birthdate</stringProp>
                    <stringProp name="Argument.value">19970901</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="includeStopped" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">includeStopped</stringProp>
                    <stringProp name="Argument.value">false</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="latinName" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">latinName</stringProp>
                    <stringProp name="Argument.value">KHALED KHALED</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">http</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">evisa-bcvi-api/v2/evisa/execution/findByNameAndBirthdate</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="identify" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&quot;machineReadableZone&quot;:{&quot;travelDocumentNumber&quot;:&quot;SDKKFKK&quot;,&quot;travelDocumentAuthoritySource&quot;:&quot;COUNTRY.ERI&quot;,&quot;dateOfBirth&quot;:&quot;19970901&quot;,&quot;fullLatinName&quot;:&quot;KHALED KHALED&quot;},&quot;identifyFingerprints&quot;:[],&quot;fId&quot;:&quot;&quot;,&quot;passengerType&quot;:&quot;PASSENGER_TYPE.NORMAL_PASSENGER&quot;}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">http</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">movement_crud/v1/foreigner/8d2d2bae-1b5c-479b-fad7-d15a2c784fbf/identify</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="check_wl" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="birthdate" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">birthdate</stringProp>
                    <stringProp name="Argument.value">19970901</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="nationality" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">nationality</stringProp>
                    <stringProp name="Argument.value">COUNTRY.ERI</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="wltype" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">wltype</stringProp>
                    <stringProp name="Argument.value">WL2</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="name" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">name</stringProp>
                    <stringProp name="Argument.value">KHALED KHALED</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="operatorId" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">operatorId</stringProp>
                    <stringProp name="Argument.value">test5</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">http</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">watchlist_crud/v1/watchlist/blacklist_person/8d2d2bae-1b5c-479b-fad7-d15a2c784fbf/check_wl</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="getOpenFlightById" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="flightId" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">flightId</stringProp>
                    <stringProp name="Argument.value">6f760789-62d2-4de0-95a1-67ec070781f7</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">http</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">flightmanagement_crud/v1/flight/FLIGHT/getOpenFlightById</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="add_new_movement" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
  &quot;foreigner&quot;: {&#xd;
    &quot;isUnknownDateOfBirth&quot;: false,&#xd;
    &quot;fullArabicName&quot;: &quot;Ø®Ø§Ù&#x84;Ø¯ Ø®Ø§Ù&#x84;Ø¯&quot;,&#xd;
    &quot;biometricsCaptureList&quot;: {&#xd;
      &quot;fingerPrintsList&quot;: [],&#xd;
      &quot;fingerPrintExceptionCaseList&quot;: [&#xd;
        {&#xd;
          &quot;fingerPrintImageType&quot;: &quot;RIGHT_FORE&quot;,&#xd;
          &quot;printExceptionType&quot;: &quot;DAMAGED&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;fingerPrintImageType&quot;: &quot;RIGHT_MIDDLE&quot;,&#xd;
          &quot;printExceptionType&quot;: &quot;DAMAGED&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;fingerPrintImageType&quot;: &quot;RIGHT_RING&quot;,&#xd;
          &quot;printExceptionType&quot;: &quot;DAMAGED&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;fingerPrintImageType&quot;: &quot;RIGHT_LITTLE&quot;,&#xd;
          &quot;printExceptionType&quot;: &quot;DAMAGED&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;fingerPrintImageType&quot;: &quot;LEFT_FORE&quot;,&#xd;
          &quot;printExceptionType&quot;: &quot;DAMAGED&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;fingerPrintImageType&quot;: &quot;LEFT_MIDDLE&quot;,&#xd;
          &quot;printExceptionType&quot;: &quot;DAMAGED&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;fingerPrintImageType&quot;: &quot;LEFT_RING&quot;,&#xd;
          &quot;printExceptionType&quot;: &quot;DAMAGED&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;fingerPrintImageType&quot;: &quot;LEFT_LITTLE&quot;,&#xd;
          &quot;printExceptionType&quot;: &quot;DAMAGED&quot;&#xd;
        }&#xd;
      ]&#xd;
    },&#xd;
    &quot;fId&quot;: &quot;&quot;,&#xd;
    &quot;nId&quot;: null,&#xd;
    &quot;createByOperatorId&quot;: &quot;test5&quot;,&#xd;
    &quot;modifyByOperatorId&quot;: &quot;test5&quot;,&#xd;
    &quot;businessAreaOrigin&quot;: &quot;MVT&quot;,&#xd;
    &quot;nationality&quot;: &quot;COUNTRY.ERI&quot;,&#xd;
    &quot;sex&quot;: &quot;SEX.M&quot;,&#xd;
    &quot;dateOfBirth&quot;: &quot;19970901&quot;,&#xd;
    &quot;fullLatinName&quot;: &quot;${fullLatinName}&quot;,&#xd;
    &quot;recordStatus&quot;: &quot;ACTIVATED&quot;&#xd;
  },&#xd;
  &quot;movement&quot;: {&#xd;
    &quot;movementPort&quot;: { &quot;portName&quot;: &quot;ASSH&quot;, &quot;portType&quot;: &quot;AIRPORT&quot; },&#xd;
    &quot;firstLaneMovementCheckResult&quot;: {&#xd;
      &quot;movementCheckResultDate&quot;: &quot;20210912&quot;,&#xd;
      &quot;operatorID&quot;: &quot;test5&quot;,&#xd;
      &quot;stationID&quot;: &quot;ASSH054&quot;,&#xd;
      &quot;portraitStatus&quot;: &quot;SKIPPED&quot;,&#xd;
      &quot;tdExpiryCheckResult&quot;: &quot;VALID&quot;,&#xd;
      &quot;tdOpticalCheckResult&quot;: &quot;NOT_VERIFIED&quot;,&#xd;
      &quot;tdChipCheckResult&quot;: &quot;NOT_VERIFIED&quot;,&#xd;
      &quot;watchListCheckResult&quot;: [&#xd;
        {&#xd;
          &quot;dateOfBirth&quot;: &quot;19970901&quot;,&#xd;
          &quot;fullLatinName&quot;: &quot;${fullLatinName}&quot;,&#xd;
          &quot;travelDocumentNumber&quot;: &quot;${travelDocumentNumber}&quot;,&#xd;
          &quot;travelDocumentNationality&quot;: &quot;COUNTRY.ERI&quot;,&#xd;
          &quot;personWatchListCheckResult&quot;: &quot;0&quot;,&#xd;
          &quot;travelDocumentWatchListCheckResult&quot;: &quot;0&quot;,&#xd;
          &quot;name&quot;: &quot;${fullLatinName}&quot;&#xd;
        },&#xd;
        {&#xd;
          &quot;dateOfBirth&quot;: &quot;19970901&quot;,&#xd;
          &quot;fullLatinName&quot;: &quot;Ø®Ø§Ù&#x84;Ø¯ Ø®Ø§Ù&#x84;Ø¯&quot;,&#xd;
          &quot;travelDocumentNumber&quot;: &quot;${travelDocumentNumber}&quot;,&#xd;
          &quot;travelDocumentNationality&quot;: &quot;COUNTRY.ERI&quot;,&#xd;
          &quot;personWatchListCheckResult&quot;: &quot;0&quot;,&#xd;
          &quot;travelDocumentWatchListCheckResult&quot;: &quot;0&quot;,&#xd;
          &quot;name&quot;: &quot;Ø®Ø§Ù&#x84;Ø¯ Ø®Ø§Ù&#x84;Ø¯&quot;&#xd;
        }&#xd;
      ],&#xd;
      &quot;fingerPrintMatchingStatus&quot;: &quot;NOT_VERIFIED&quot;,&#xd;
      &quot;nationalTdCheckResult&quot;: &quot;NOT_VERIFIED&quot;,&#xd;
      &quot;eVisaCheckResult&quot;: &quot;VALID_VISA&quot;,&#xd;
      &quot;militaryTravelCheckResult&quot;: &quot;0&quot;&#xd;
    },&#xd;
    &quot;flightInformation&quot;: {&#xd;
      &quot;movementFlightInformationFlightNumber&quot;: &quot;FLIGHT3&quot;,&#xd;
      &quot;movementFlightInformationDateOfFlight&quot;: &quot;2021-08-24T12:00:00+02:00&quot;,&#xd;
      &quot;creationPort&quot;: { &quot;portName&quot;: &quot;ASSH&quot;, &quot;portType&quot;: &quot;AIRPORT&quot; },&#xd;
      &quot;movementFlightInformationOperatingCarrierDesignator&quot;: &quot;AIRLINE.164&quot;,&#xd;
      &quot;movementFlightManagementId&quot;: &quot;6f760789-62d2-4de0-95a1-67ec070781f7&quot;,&#xd;
      &quot;internationalPort&quot;: &quot;INTERNATIONAL_PORT.ABU&quot;,&#xd;
      &quot;country&quot;: &quot;COUNTRY.ARE&quot;,&#xd;
      &quot;flightType&quot;: &quot;FLIGHT_TYPE.ARRIVAL&quot;,&#xd;
      &quot;movementFlightInformationDescription&quot;: &quot;Ø§Ø¨Ù&#x88;Ø¸Ø¨Ù&#x89;/Ù&#x85;ØµØ±&quot;&#xd;
    },&#xd;
    &quot;livePortrait&quot;: { &quot;portraitType&quot;: &quot;NOT_ACQUIRED&quot; },&#xd;
    &quot;movementDecision&quot;: {},&#xd;
    &quot;movementTerminal&quot;: &quot;TERMINAL.ASSH_ARR_16&quot;,&#xd;
    &quot;movementSource&quot;: &quot;BCVI_SYSTEM_V1&quot;,&#xd;
    &quot;movementGate&quot;: &quot;GATE1_Not_Used&quot;,&#xd;
    &quot;officerID&quot;: &quot;test5&quot;,&#xd;
    &quot;stationID&quot;: &quot;ASSH054&quot;,&#xd;
    &quot;passengerType&quot;: &quot;PASSENGER_TYPE.NORMAL_PASSENGER&quot;,&#xd;
    &quot;fullLatinName&quot;: &quot;${fullLatinName}&quot;,&#xd;
    &quot;secondLaneMovementCheckResult&quot;: null,&#xd;
    &quot;movementType&quot;: &quot;FOREIGNER_ENTRY_FIRST_LANE&quot;,&#xd;
    &quot;fullArabicName&quot;: &quot;Ø®Ø§Ù&#x84;Ø¯ Ø®Ø§Ù&#x84;Ø¯&quot;,&#xd;
    &quot;movementVisaType&quot;: &quot;GULF_STAMP&quot;,&#xd;
    &quot;movementDateOfBirth&quot;: &quot;19970901&quot;,&#xd;
    &quot;visaToLegacy&quot;: {},&#xd;
    &quot;movementTravelDocument&quot;: {&#xd;
      &quot;travelDocumentImage&quot;: {&#xd;
        &quot;travelDocumentImageAcquisitionSource&quot;: &quot;MANUAL_ACQUISITION&quot;,&#xd;
        &quot;travelDocumentImageBinary_base64&quot;: null&#xd;
      },&#xd;
      &quot;travelDocumentStatus&quot;: &quot;ACTIVATED&quot;,&#xd;
      &quot;travelDocumentPortrait&quot;: null,&#xd;
      &quot;travelDocumentPrimaryIdentifier&quot;: &quot;KHALED&quot;,&#xd;
      &quot;travelDocumentSecondaryIdentifier&quot;: &quot;KHALED&quot;,&#xd;
      &quot;travelDocumentType&quot;: &quot;TD_TYPE.STANDARD_PASSPORT&quot;,&#xd;
      &quot;travelDocumentNumber&quot;: &quot;${travelDocumentNumber}&quot;,&#xd;
      &quot;travelDocumentDateOfBirth&quot;: &quot;19970901&quot;,&#xd;
      &quot;travelDocumentDateOfExpiry&quot;: &quot;20300101&quot;,&#xd;
      &quot;travelDocumentSex&quot;: &quot;SEX.M&quot;,&#xd;
      &quot;travelDocumentPlaceOfBirth&quot;: &quot;COUNTRY.ERI&quot;,&#xd;
      &quot;travelDocumentAuthoritySource&quot;: &quot;COUNTRY.ERI&quot;&#xd;
    },&#xd;
    &quot;movementRegistration&quot;: {&#xd;
      &quot;movementRegistrationStatus&quot;: &quot;NOT_APPLICABLE&quot;,&#xd;
      &quot;officerID&quot;: &quot;test5&quot;,&#xd;
      &quot;stationID&quot;: &quot;ASSH054&quot;&#xd;
    }&#xd;
  }&#xd;
}&#xd;
</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">http</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">movement_crud/v1/movement/8d2d2bae-1b5c-479b-fad7-d15a2c784fbf/add_new_movement</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Check if Add Successfully" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-1447651972">foreignerId</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">2</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
        </hashTree>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="VIP Wanted" enabled="false">
          <boolProp name="TransactionController.parent">true</boolProp>
        </TransactionController>
        <hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="VIP_traveling" enabled="true">
            <boolProp name="TransactionController.parent">true</boolProp>
          </TransactionController>
          <hashTree/>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="VIP_Arriving" enabled="true">
            <boolProp name="TransactionController.parent">true</boolProp>
          </TransactionController>
          <hashTree/>
        </hashTree>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="Normal Wanted" enabled="false">
          <boolProp name="TransactionController.includeTimers">false</boolProp>
          <boolProp name="TransactionController.parent">true</boolProp>
        </TransactionController>
        <hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="Normal_traveling" enabled="true">
            <boolProp name="TransactionController.parent">true</boolProp>
          </TransactionController>
          <hashTree/>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="Normal_Arriving" enabled="true">
            <boolProp name="TransactionController.parent">true</boolProp>
          </TransactionController>
          <hashTree/>
        </hashTree>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <url>true</url>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
        <ResultCollector guiclass="AssertionVisualizer" testclass="ResultCollector" testname="Assertion Results" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <url>true</url>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
      </hashTree>
    </hashTree>
  </hashTree>
</jmeterTestPlan>
