<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="5.0" jmeter="5.4.1">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="FID Performance Script " enabled="true">
      <stringProp name="TestPlan.comments">Performance Script for Foreiner ID </stringProp>
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">false</boolProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" enabled="true">
        <collectionProp name="Arguments.arguments"/>
      </elementProp>
      <stringProp name="TestPlan.user_define_classpath"></stringProp>
    </TestPlan>
    <hashTree>
      <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
        <collectionProp name="HeaderManager.headers">
          <elementProp name="Accept" elementType="Header">
            <stringProp name="Header.name">Accept</stringProp>
            <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
          </elementProp>
          <elementProp name="User-Agent" elementType="Header">
            <stringProp name="Header.name">User-Agent</stringProp>
            <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/101.0.4951.67 Safari/537.36</stringProp>
          </elementProp>
        </collectionProp>
      </HeaderManager>
      <hashTree/>
      <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments">
          <elementProp name="BASE_URL_1" elementType="Argument">
            <stringProp name="Argument.name">BASE_URL_1</stringProp>
            <stringProp name="Argument.value">${__P(server)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
        </collectionProp>
      </Arguments>
      <hashTree/>
      <ConfigTestElement guiclass="HttpDefaultsGui" testclass="ConfigTestElement" testname="HTTP Request Defaults" enabled="true">
        <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
          <collectionProp name="Arguments.arguments"/>
        </elementProp>
        <stringProp name="HTTPSampler.domain"></stringProp>
        <stringProp name="HTTPSampler.port"></stringProp>
        <stringProp name="HTTPSampler.protocol"></stringProp>
        <stringProp name="HTTPSampler.contentEncoding"></stringProp>
        <stringProp name="HTTPSampler.path"></stringProp>
        <boolProp name="HTTPSampler.image_parser">true</boolProp>
        <boolProp name="HTTPSampler.concurrentDwn">true</boolProp>
        <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
        <stringProp name="HTTPSampler.connect_timeout"></stringProp>
        <stringProp name="HTTPSampler.response_timeout"></stringProp>
      </ConfigTestElement>
      <hashTree/>
      <DNSCacheManager guiclass="DNSCachePanel" testclass="DNSCacheManager" testname="DNS Cache Manager" enabled="true">
        <collectionProp name="DNSCacheManager.servers"/>
        <boolProp name="DNSCacheManager.clearEachIteration">true</boolProp>
        <boolProp name="DNSCacheManager.isCustomResolver">false</boolProp>
      </DNSCacheManager>
      <hashTree/>
      <AuthManager guiclass="AuthPanel" testclass="AuthManager" testname="HTTP Authorization Manager" enabled="true">
        <collectionProp name="AuthManager.auth_list"/>
        <boolProp name="AuthManager.controlledByThreadGroup">false</boolProp>
      </AuthManager>
      <hashTree/>
      <CookieManager guiclass="CookiePanel" testclass="CookieManager" testname="HTTP Cookie Manager" enabled="true">
        <collectionProp name="CookieManager.cookies"/>
        <boolProp name="CookieManager.clearEachIteration">true</boolProp>
        <boolProp name="CookieManager.controlledByThreadGroup">false</boolProp>
      </CookieManager>
      <hashTree/>
      <CacheManager guiclass="CacheManagerGui" testclass="CacheManager" testname="HTTP Cache Manager" enabled="true">
        <boolProp name="clearEachIteration">true</boolProp>
        <boolProp name="useExpires">false</boolProp>
        <boolProp name="CacheManager.controlledByThread">false</boolProp>
      </CacheManager>
      <hashTree/>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Thread Group" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">${__P(NoThread)}</stringProp>
        <stringProp name="ThreadGroup.ramp_time">${__groovy(${__P(RampupTimePeriod)})}</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration">0</stringProp>
        <stringProp name="ThreadGroup.delay">0</stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">false</boolProp>
      </ThreadGroup>
      <hashTree>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="TR1: Login" enabled="true">
          <boolProp name="TransactionController.parent">true</boolProp>
        </TransactionController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="RQ.1.1: login" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&quot;username&quot;:&quot;${__P(username)}&quot;,&quot;password&quot;:&quot;${__P(password)}&quot;}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">http</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">movement_crud/v1/foreigner/login</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Check Response Status" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="RQ.1.2: getLookupCountry" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="subsystem" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">subsystem</stringProp>
                  <stringProp name="Argument.value">FOREIGNER_ID</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="className" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">className</stringProp>
                  <stringProp name="Argument.value">Country</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">http</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">core_service/v1/lookup/FID_LOOKUP/getLookup</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Check Response Status" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="RQ.1.3: getLookupSex" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="subsystem" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">subsystem</stringProp>
                  <stringProp name="Argument.value">FOREIGNER_ID</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="className" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">className</stringProp>
                  <stringProp name="Argument.value">Sex</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">http</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">core_service/v1/lookup/FID_LOOKUP/getLookup</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Check Response Status" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="RQ.1.4: getLookupFamilyRelationship" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="subsystem" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">subsystem</stringProp>
                  <stringProp name="Argument.value">FOREIGNER_ID</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="className" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">className</stringProp>
                  <stringProp name="Argument.value">FamilyRelationship</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">http</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">core_service/v1/lookup/FID_LOOKUP/getLookup</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Check Response Status" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="RQ.1.5: getLookupTravelDocumentType" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="subsystem" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">subsystem</stringProp>
                  <stringProp name="Argument.value">FOREIGNER_ID</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="className" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">className</stringProp>
                  <stringProp name="Argument.value">TravelDocumentType</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">http</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">core_service/v1/lookup/FID_LOOKUP/getLookup</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Check Response Status" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="RQ.1.6: getLookupEmbassy" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="subsystem" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">subsystem</stringProp>
                  <stringProp name="Argument.value">FOREIGNER_ID</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="className" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">className</stringProp>
                  <stringProp name="Argument.value">Embassy</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">http</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">core_service/v1/lookup/FID_LOOKUP/getLookup</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Check Response Status" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="RQ.1.7: getLookupPoliceStation" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="subsystem" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">subsystem</stringProp>
                  <stringProp name="Argument.value">FOREIGNER_ID</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="className" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">className</stringProp>
                  <stringProp name="Argument.value">PoliceStation</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">http</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">core_service/v1/lookup/FID_LOOKUP/getLookup</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Check Response Status" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="RQ.1.8: getLookupImmigrationOffice" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="subsystem" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">subsystem</stringProp>
                  <stringProp name="Argument.value">FOREIGNER_ID</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="className" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">className</stringProp>
                  <stringProp name="Argument.value">ImmigrationOffice</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">http</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">core_service/v1/lookup/FID_LOOKUP/getLookup</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Check Response Status" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="RQ.1.9: getLookupPort" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="subsystem" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">subsystem</stringProp>
                  <stringProp name="Argument.value">FOREIGNER_ID</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="className" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">className</stringProp>
                  <stringProp name="Argument.value">Port</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">http</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">core_service/v1/lookup/FID_LOOKUP/getLookup</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Check Response Status" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="RQ.1.10: getLookupFollowerRemoveReason" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="subsystem" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">subsystem</stringProp>
                  <stringProp name="Argument.value">FOREIGNER_ID</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="className" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">className</stringProp>
                  <stringProp name="Argument.value">FollowerRemoveReason</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">http</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">core_service/v1/lookup/FID_LOOKUP/getLookup</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Check Response Status" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="RQ.1.11: dataCenter" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">http</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">core_service/v1/lookup/1/dataCenter</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Check Response Status" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="RQ.1.12: getTranslationFOREIGNER_ID" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="subsystem" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">subsystem</stringProp>
                  <stringProp name="Argument.value">FOREIGNER_ID</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
            <stringProp name="HTTPSampler.port"></stringProp>
            <stringProp name="HTTPSampler.protocol">http</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">core_service/v1/lookup/1/getTranslation</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Check Response Status" enabled="true">
              <collectionProp name="Asserion.test_strings">
                <stringProp name="49586">200</stringProp>
              </collectionProp>
              <stringProp name="Assertion.custom_message"></stringProp>
              <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
              <boolProp name="Assertion.assume_success">false</boolProp>
              <intProp name="Assertion.test_type">16</intProp>
            </ResponseAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
        <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">true</boolProp>
          <stringProp name="LoopController.loops">${__P(NoIteration)}</stringProp>
        </LoopController>
        <hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="TR2: Search with Passport Data" enabled="true">
            <boolProp name="TransactionController.parent">true</boolProp>
          </TransactionController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="RQ.2.1: list_foreigners_count_businessFid" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="businessFid" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">businessFid</stringProp>
                    <stringProp name="Argument.value">13011213M30061610</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">http</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">movement_crud/v1/foreigner/LIST_FOREIGNER_COUNT/list_foreigners_count</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Check Response Status" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="RQ.2.2: list_foreignersWithbusinessFid" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="orderType" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">orderType</stringProp>
                    <stringProp name="Argument.value">ASC</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="pageNumber" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">pageNumber</stringProp>
                    <stringProp name="Argument.value">1</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="businessFid" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">businessFid</stringProp>
                    <stringProp name="Argument.value">13011213M30061610</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="pageSize" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">pageSize</stringProp>
                    <stringProp name="Argument.value">10</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">http</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">movement_crud/v1/foreigner/4464e0b3-5465-e5b8-897d-5d61e198f657/list_foreigners</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Check Response Status" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="RQ.2.3: list_foreigners_count_tdNumber" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="tdNumber" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">tdNumber</stringProp>
                    <stringProp name="Argument.value">SHADY1997</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">http</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">movement_crud/v1/foreigner/LIST_FOREIGNER_COUNT/list_foreigners_count</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Check Response Status" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="RQ.2.4: list_foreignersWith_tdNumber" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="orderType" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">orderType</stringProp>
                    <stringProp name="Argument.value">ASC</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="pageNumber" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">pageNumber</stringProp>
                    <stringProp name="Argument.value">1</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="pageSize" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">pageSize</stringProp>
                    <stringProp name="Argument.value">10</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="tdNumber" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">tdNumber</stringProp>
                    <stringProp name="Argument.value">SHADY1997</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">http</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">movement_crud/v1/foreigner/4464e0b3-5465-e5b8-897d-5d61e198f657/list_foreigners</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Check Response Status" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="RQ.2.5: list_foreigners_countWith_tdIssuingCountry" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="tdIssuingCountry" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">tdIssuingCountry</stringProp>
                    <stringProp name="Argument.value">COUNTRY.ETH</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">http</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">movement_crud/v1/foreigner/LIST_FOREIGNER_COUNT/list_foreigners_count</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Check Response Status" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="RQ.2.6: list_foreignersWith_tdIssuingCountry" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="orderType" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">orderType</stringProp>
                    <stringProp name="Argument.value">ASC</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="pageNumber" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">pageNumber</stringProp>
                    <stringProp name="Argument.value">1</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="pageSize" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">pageSize</stringProp>
                    <stringProp name="Argument.value">10</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="tdIssuingCountry" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">tdIssuingCountry</stringProp>
                    <stringProp name="Argument.value">COUNTRY.ETH</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">http</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">movement_crud/v1/foreigner/4464e0b3-5465-e5b8-897d-5d61e198f657/list_foreigners</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Check Response Status" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="RQ.2.7: list_foreigners_count_personNationality" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="personNationality" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">personNationality</stringProp>
                    <stringProp name="Argument.value">COUNTRY.ETH</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">http</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">movement_crud/v1/foreigner/LIST_FOREIGNER_COUNT/list_foreigners_count</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Check Response Status" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="RQ.2.8: list_foreigners_personNationality" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="orderType" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">orderType</stringProp>
                    <stringProp name="Argument.value">ASC</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="pageNumber" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">pageNumber</stringProp>
                    <stringProp name="Argument.value">1</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="pageSize" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">pageSize</stringProp>
                    <stringProp name="Argument.value">10</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="personNationality" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">personNationality</stringProp>
                    <stringProp name="Argument.value">COUNTRY.ETH</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">http</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">movement_crud/v1/foreigner/4464e0b3-5465-e5b8-897d-5d61e198f657/list_foreigners</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Check Response Status" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="RQ.2.9: list_foreigners_count__fullLatinName" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="fullLatinName" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">fullLatinName</stringProp>
                    <stringProp name="Argument.value">SHADY AHMED</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">http</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">movement_crud/v1/foreigner/LIST_FOREIGNER_COUNT/list_foreigners_count</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Check Response Status" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="RQ.2.10: list_foreigners_fullLatinName" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="fullLatinName" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">fullLatinName</stringProp>
                    <stringProp name="Argument.value">SHADY AHMED</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="orderType" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">orderType</stringProp>
                    <stringProp name="Argument.value">ASC</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="pageNumber" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">pageNumber</stringProp>
                    <stringProp name="Argument.value">1</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="pageSize" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">pageSize</stringProp>
                    <stringProp name="Argument.value">10</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">http</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">movement_crud/v1/foreigner/4464e0b3-5465-e5b8-897d-5d61e198f657/list_foreigners</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Check Response Status" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="RQ.2.11: list_foreigners_count_fullArabicName" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="fullArabicName" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">fullArabicName</stringProp>
                    <stringProp name="Argument.value">شادى احمد</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">http</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">movement_crud/v1/foreigner/LIST_FOREIGNER_COUNT/list_foreigners_count</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Check Response Status" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="RQ.2.12: list_foreigners_fullArabicName" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="fullArabicName" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">true</boolProp>
                    <stringProp name="Argument.name">fullArabicName</stringProp>
                    <stringProp name="Argument.value">شادى احمد</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="orderType" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">orderType</stringProp>
                    <stringProp name="Argument.value">ASC</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="pageNumber" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">pageNumber</stringProp>
                    <stringProp name="Argument.value">1</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="pageSize" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">pageSize</stringProp>
                    <stringProp name="Argument.value">10</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">http</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">movement_crud/v1/foreigner/4464e0b3-5465-e5b8-897d-5d61e198f657/list_foreigners</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Check Response Status" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="RQ.2.13: list_foreigners_count_recordStatus" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="orderType" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">orderType</stringProp>
                    <stringProp name="Argument.value">ASC</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="recordStatus" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">recordStatus</stringProp>
                    <stringProp name="Argument.value">ACTIVATED</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="pageNumber" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">pageNumber</stringProp>
                    <stringProp name="Argument.value">1</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="pageSize" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">pageSize</stringProp>
                    <stringProp name="Argument.value">10</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">http</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">movement_crud/v1/foreigner/LIST_FOREIGNER_COUNT/list_foreigners_count</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Check Response Status" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="RQ.2.14: list_foreigners_recordStatus" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="orderType" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">orderType</stringProp>
                    <stringProp name="Argument.value">ASC</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="recordStatus" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">recordStatus</stringProp>
                    <stringProp name="Argument.value">ACTIVATED</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="pageNumber" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">pageNumber</stringProp>
                    <stringProp name="Argument.value">1</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="pageSize" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">pageSize</stringProp>
                    <stringProp name="Argument.value">10</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">http</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">movement_crud/v1/foreigner/4464e0b3-5465-e5b8-897d-5d61e198f657/list_foreigners</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Check Response Status" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="RQ.2.15: list_foreigners_count_hasFingerPrints" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="hasFingerPrints" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">hasFingerPrints</stringProp>
                    <stringProp name="Argument.value">true</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">http</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">movement_crud/v1/foreigner/LIST_FOREIGNER_COUNT/list_foreigners_count</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Check Response Status" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="RQ.2.16: list_foreigners_hasFingerPrints" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="hasFingerPrints" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">hasFingerPrints</stringProp>
                    <stringProp name="Argument.value">true</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="orderType" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">orderType</stringProp>
                    <stringProp name="Argument.value">ASC</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="pageNumber" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">pageNumber</stringProp>
                    <stringProp name="Argument.value">1</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="pageSize" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">pageSize</stringProp>
                    <stringProp name="Argument.value">10</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">http</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">movement_crud/v1/foreigner/4464e0b3-5465-e5b8-897d-5d61e198f657/list_foreigners</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Check Response Status" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="RQ.2.17: list_foreigners_countWithSex" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="sex" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">sex</stringProp>
                    <stringProp name="Argument.value">M</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">http</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">movement_crud/v1/foreigner/LIST_FOREIGNER_COUNT/list_foreigners_count</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Check Response Status" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="RQ.2.18: list_foreignersWithSex" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="orderType" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">orderType</stringProp>
                    <stringProp name="Argument.value">ASC</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="pageNumber" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">pageNumber</stringProp>
                    <stringProp name="Argument.value">1</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="sex" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">sex</stringProp>
                    <stringProp name="Argument.value">M</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="pageSize" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">pageSize</stringProp>
                    <stringProp name="Argument.value">10</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">http</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">movement_crud/v1/foreigner/4464e0b3-5465-e5b8-897d-5d61e198f657/list_foreigners</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Check Response Status" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="RQ.2.19: list_foreigners_countWithNId" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="nId" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">nId</stringProp>
                    <stringProp name="Argument.value">29709011311553</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">http</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">movement_crud/v1/foreigner/LIST_FOREIGNER_COUNT/list_foreigners_count</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Check Response Status" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="RQ.2.20: list_foreignersWithNId" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="orderType" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">orderType</stringProp>
                    <stringProp name="Argument.value">ASC</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="pageNumber" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">pageNumber</stringProp>
                    <stringProp name="Argument.value">1</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="nId" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">nId</stringProp>
                    <stringProp name="Argument.value">29709011311553</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="pageSize" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">pageSize</stringProp>
                    <stringProp name="Argument.value">10</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">http</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">movement_crud/v1/foreigner/4464e0b3-5465-e5b8-897d-5d61e198f657/list_foreigners</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Check Response Status" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="RQ.2.21: list_foreigners_count_status" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="status" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">status</stringProp>
                    <stringProp name="Argument.value">NORMAL</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">http</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">movement_crud/v1/foreigner/LIST_FOREIGNER_COUNT/list_foreigners_count</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Check Response Status" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="RQ.2.22: list_foreigners_status" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="orderType" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">orderType</stringProp>
                    <stringProp name="Argument.value">ASC</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="pageNumber" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">pageNumber</stringProp>
                    <stringProp name="Argument.value">1</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="pageSize" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">pageSize</stringProp>
                    <stringProp name="Argument.value">10</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="status" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">status</stringProp>
                    <stringProp name="Argument.value">NORMAL</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">http</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">movement_crud/v1/foreigner/4464e0b3-5465-e5b8-897d-5d61e198f657/list_foreigners</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Check Response Status" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="RQ.2.23: list_foreigners_count_endDateOfBirth&amp;beginDateOfBirth" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="beginDateOfBirth" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">beginDateOfBirth</stringProp>
                    <stringProp name="Argument.value">19000101</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="endDateOfBirth" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">endDateOfBirth</stringProp>
                    <stringProp name="Argument.value">20220526</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">http</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">movement_crud/v1/foreigner/LIST_FOREIGNER_COUNT/list_foreigners_count</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Check Response Status" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="RQ.2.24: list_foreigners_endDateOfBirth&amp;beginDateOfBirth" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="beginDateOfBirth" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">beginDateOfBirth</stringProp>
                    <stringProp name="Argument.value">19000101</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="orderType" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">orderType</stringProp>
                    <stringProp name="Argument.value">ASC</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="endDateOfBirth" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">endDateOfBirth</stringProp>
                    <stringProp name="Argument.value">20220526</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="pageNumber" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">pageNumber</stringProp>
                    <stringProp name="Argument.value">1</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="pageSize" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">pageSize</stringProp>
                    <stringProp name="Argument.value">10</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">http</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">movement_crud/v1/foreigner/4464e0b3-5465-e5b8-897d-5d61e198f657/list_foreigners</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Check Response Status" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="TR3: Search With nist File" enabled="true">
            <boolProp name="TransactionController.parent">true</boolProp>
          </TransactionController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="RQ.3.1: Identify_nist" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&quot;nist_base64&quot;:&quot;&quot;}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">http</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">movement_crud/v1/foreigner/4464e0b3-5465-e5b8-897d-5d61e198f657/identify_nist</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Content-Type" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Check Response Status" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="TR4: Search With Fingerprint" enabled="true">
            <boolProp name="TransactionController.parent">true</boolProp>
          </TransactionController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="RQ.4.1: identify_fingerprint" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
    &quot;identifyFingerprints&quot;: [&#xd;
        {&#xd;
            &quot;fingerPrintImage_base64&quot;: &quot;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&quot;,&#xd;
            &quot;fingerPrintType&quot;: &quot;RIGHT_FORE&quot;,&#xd;
            &quot;fingerPrintImageFormat&quot;: &quot;WSQ&quot;,&#xd;
            &quot;fingerPrintImageWidth&quot;: 512,&#xd;
            &quot;fingerPrintImageHeight&quot;: 512,&#xd;
            &quot;fingerPrintAcquisitionSource&quot;: &quot;MWAVE&quot;&#xd;
        },&#xd;
        {&#xd;
            &quot;fingerPrintImage_base64&quot;: &quot;&quot;,&#xd;
            &quot;fingerPrintType&quot;: &quot;RIGHT_RING&quot;,&#xd;
            &quot;fingerPrintImageFormat&quot;: &quot;WSQ&quot;,&#xd;
            &quot;fingerPrintImageWidth&quot;: 512,&#xd;
            &quot;fingerPrintImageHeight&quot;: 512,&#xd;
            &quot;fingerPrintAcquisitionSource&quot;: &quot;MWAVE&quot;&#xd;
        },&#xd;
        {&#xd;
            &quot;fingerPrintImage_base64&quot;: &quot;&quot;,&#xd;
            &quot;fingerPrintType&quot;: &quot;RIGHT_MIDDLE&quot;,&#xd;
            &quot;fingerPrintImageFormat&quot;: &quot;WSQ&quot;,&#xd;
            &quot;fingerPrintImageWidth&quot;: 512,&#xd;
            &quot;fingerPrintImageHeight&quot;: 512,&#xd;
            &quot;fingerPrintAcquisitionSource&quot;: &quot;MWAVE&quot;&#xd;
        },&#xd;
        {&#xd;
            &quot;fingerPrintImage_base64&quot;: &quot;&quot;,&#xd;
            &quot;fingerPrintType&quot;: &quot;RIGHT_LITTLE&quot;,&#xd;
            &quot;fingerPrintImageFormat&quot;: &quot;WSQ&quot;,&#xd;
            &quot;fingerPrintImageWidth&quot;: 512,&#xd;
            &quot;fingerPrintImageHeight&quot;: 512,&#xd;
            &quot;fingerPrintAcquisitionSource&quot;: &quot;MWAVE&quot;&#xd;
        },&#xd;
        {&#xd;
            &quot;fingerPrintImage_base64&quot;: &quot;&quot;,&#xd;
            &quot;fingerPrintType&quot;: &quot;LEFT_FORE&quot;,&#xd;
            &quot;fingerPrintImageFormat&quot;: &quot;WSQ&quot;,&#xd;
            &quot;fingerPrintImageWidth&quot;: 512,&#xd;
            &quot;fingerPrintImageHeight&quot;: 512,&#xd;
            &quot;fingerPrintAcquisitionSource&quot;: &quot;MWAVE&quot;&#xd;
        },&#xd;
        {&#xd;
            &quot;fingerPrintImage_base64&quot;: &quot;&quot;,&#xd;
            &quot;fingerPrintType&quot;: &quot;LEFT_RING&quot;,&#xd;
            &quot;fingerPrintImageFormat&quot;: &quot;WSQ&quot;,&#xd;
            &quot;fingerPrintImageWidth&quot;: 512,&#xd;
            &quot;fingerPrintImageHeight&quot;: 512,&#xd;
            &quot;fingerPrintAcquisitionSource&quot;: &quot;MWAVE&quot;&#xd;
        },&#xd;
        {&#xd;
            &quot;fingerPrintImage_base64&quot;: &quot;&quot;,&#xd;
            &quot;fingerPrintType&quot;: &quot;LEFT_MIDDLE&quot;,&#xd;
            &quot;fingerPrintImageFormat&quot;: &quot;WSQ&quot;,&#xd;
            &quot;fingerPrintImageWidth&quot;: 512,&#xd;
            &quot;fingerPrintImageHeight&quot;: 512,&#xd;
            &quot;fingerPrintAcquisitionSource&quot;: &quot;MWAVE&quot;&#xd;
        },&#xd;
        {&#xd;
            &quot;fingerPrintImage_base64&quot;: &quot;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&quot;,&#xd;
            &quot;fingerPrintType&quot;: &quot;LEFT_LITTLE&quot;,&#xd;
            &quot;fingerPrintImageFormat&quot;: &quot;WSQ&quot;,&#xd;
            &quot;fingerPrintImageWidth&quot;: 512,&#xd;
            &quot;fingerPrintImageHeight&quot;: 512,&#xd;
            &quot;fingerPrintAcquisitionSource&quot;: &quot;MWAVE&quot;&#xd;
        }&#xd;
    ]&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${BASE_URL_1}</stringProp>
              <stringProp name="HTTPSampler.port"></stringProp>
              <stringProp name="HTTPSampler.protocol">http</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">movement_crud/v1/foreigner/914d18ce-9b65-4fb5-4054-357aadc69a82/identify</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Content-Type" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Check Response Status" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="49586">200</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
        </hashTree>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <url>true</url>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename">${__P(ResultPath)}</stringProp>
        </ResultCollector>
        <hashTree/>
      </hashTree>
    </hashTree>
  </hashTree>
</jmeterTestPlan>
